
Kalman_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000651c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080066f4  080066f4  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  000080bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00007734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  000080bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0000773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08006744  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200000c0  08006800  000080c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08006800  000084f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018891  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263d  00000000  00000000  0002097d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00022fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df5  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ab9  00000000  00000000  00024f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173db  00000000  00000000  0004ba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe4b4  00000000  00000000  00062df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001612a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e04  00000000  00000000  001612e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001660ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080066dc 	.word	0x080066dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000c4 	.word	0x200000c4
 8000214:	080066dc 	.word	0x080066dc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f001 f8df 	bl	8001f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f84e 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 fa90 	bl	8001274 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d54:	f000 f896 	bl	8000e84 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d58:	f000 f99a 	bl	8001090 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d5c:	f000 fa3c 	bl	80011d8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d60:	f000 f8da 	bl	8000f18 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d64:	f000 f9ea 	bl	800113c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d68:	213c      	movs	r1, #60	@ 0x3c
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <main+0x88>)
 8000d6c:	f002 ff26 	bl	8003bbc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d70:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <main+0x8c>)
 8000d72:	f002 fc91 	bl	8003698 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d76:	4817      	ldr	r0, [pc, #92]	@ (8000dd4 <main+0x90>)
 8000d78:	f002 fc8e 	bl	8003698 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <main+0x94>)
 8000d80:	f002 fd64 	bl	800384c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d84:	2104      	movs	r1, #4
 8000d86:	4814      	ldr	r0, [pc, #80]	@ (8000dd8 <main+0x94>)
 8000d88:	f002 fd60 	bl	800384c <HAL_TIM_PWM_Start>
  Kalman_Start();
 8000d8c:	f000 fdd2 	bl	8001934 <Kalman_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Voltage = 5.0*PWM/1000.0;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <main+0x98>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb91 	bl	80004bc <__aeabi_i2d>
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <main+0x9c>)
 8000da0:	f7ff fbf6 	bl	8000590 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <main+0xa0>)
 8000db2:	f7ff fd17 	bl	80007e4 <__aeabi_ddiv>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fdf9 	bl	80009b4 <__aeabi_d2f>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <main+0xa4>)
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e7e2      	b.n	8000d90 <main+0x4c>
 8000dca:	bf00      	nop
 8000dcc:	200001bc 	.word	0x200001bc
 8000dd0:	20000254 	.word	0x20000254
 8000dd4:	20000208 	.word	0x20000208
 8000dd8:	20000170 	.word	0x20000170
 8000ddc:	200002ac 	.word	0x200002ac
 8000de0:	40140000 	.word	0x40140000
 8000de4:	408f4000 	.word	0x408f4000
 8000de8:	200002bc 	.word	0x200002bc

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	@ 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	2238      	movs	r2, #56	@ 0x38
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f005 fc41 	bl	8006682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f001 fbba 	bl	8002588 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1e:	2340      	movs	r3, #64	@ 0x40
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e2e:	2355      	movs	r3, #85	@ 0x55
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fc54 	bl	80026f0 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 fe83 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 ff52 	bl	8002d14 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e76:	f000 fe6f 	bl	8001b58 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	@ 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000e8a:	4a22      	ldr	r2, [pc, #136]	@ (8000f14 <MX_LPUART1_UART_Init+0x90>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ec6:	4812      	ldr	r0, [pc, #72]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000ec8:	f004 f8b8 	bl	800503c <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 fe41 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000eda:	f004 fe53 	bl	8005b84 <HAL_UARTEx_SetTxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ee4:	f000 fe38 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4809      	ldr	r0, [pc, #36]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000eec:	f004 fe88 	bl	8005c00 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ef6:	f000 fe2f 	bl	8001b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_LPUART1_UART_Init+0x8c>)
 8000efc:	f004 fe09 	bl	8005b12 <HAL_UARTEx_DisableFifoMode>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f06:	f000 fe27 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000dc 	.word	0x200000dc
 8000f14:	40008000 	.word	0x40008000

08000f18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b09c      	sub	sp, #112	@ 0x70
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2234      	movs	r2, #52	@ 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fb95 	bl	8006682 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f58:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800108c <MX_TIM1_Init+0x174>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f60:	22a9      	movs	r2, #169	@ 0xa9
 8000f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b48      	ldr	r3, [pc, #288]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f6a:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b45      	ldr	r3, [pc, #276]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f78:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b42      	ldr	r3, [pc, #264]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f84:	4840      	ldr	r0, [pc, #256]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000f86:	f002 fb2f 	bl	80035e8 <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f000 fde2 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4839      	ldr	r0, [pc, #228]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000fa2:	f003 f8fd 	bl	80041a0 <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fac:	f000 fdd4 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb0:	4835      	ldr	r0, [pc, #212]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000fb2:	f002 fbe9 	bl	8003788 <HAL_TIM_PWM_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fbc:	f000 fdcc 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482d      	ldr	r0, [pc, #180]	@ (8001088 <MX_TIM1_Init+0x170>)
 8000fd4:	f003 fec2 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fde:	f000 fdbb 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe2:	2360      	movs	r3, #96	@ 0x60
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fea:	2300      	movs	r3, #0
 8000fec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4820      	ldr	r0, [pc, #128]	@ (8001088 <MX_TIM1_Init+0x170>)
 8001008:	f002 ffb6 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001012:	f000 fda1 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001016:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101a:	2204      	movs	r2, #4
 800101c:	4619      	mov	r1, r3
 800101e:	481a      	ldr	r0, [pc, #104]	@ (8001088 <MX_TIM1_Init+0x170>)
 8001020:	f002 ffaa 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800102a:	f000 fd95 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <MX_TIM1_Init+0x170>)
 800106c:	f003 ff0c 	bl	8004e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001076:	f000 fd6f 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107a:	4803      	ldr	r0, [pc, #12]	@ (8001088 <MX_TIM1_Init+0x170>)
 800107c:	f000 fe86 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001080:	bf00      	nop
 8001082:	3770      	adds	r7, #112	@ 0x70
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000170 	.word	0x20000170
 800108c:	40012c00 	.word	0x40012c00

08001090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	@ 0x30
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2224      	movs	r2, #36	@ 0x24
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 faef 	bl	8006682 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010b0:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <MX_TIM3_Init+0xa8>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64511;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010c2:	f64f 32ff 	movw	r2, #64511	@ 0xfbff
 80010c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_TIM3_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010d4:	2303      	movs	r3, #3
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010dc:	2301      	movs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_TIM3_Init+0xa4>)
 8001100:	f002 fcb6 	bl	8003a70 <HAL_TIM_Encoder_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800110a:	f000 fd25 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <MX_TIM3_Init+0xa4>)
 800111c:	f003 fe1e 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001126:	f000 fd17 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	@ 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001bc 	.word	0x200001bc
 8001138:	40000400 	.word	0x40000400

0800113c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115a:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <MX_TIM4_Init+0x94>)
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <MX_TIM4_Init+0x98>)
 800115e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_TIM4_Init+0x94>)
 8001162:	22a9      	movs	r2, #169	@ 0xa9
 8001164:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_TIM4_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_TIM4_Init+0x94>)
 800116e:	220a      	movs	r2, #10
 8001170:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_TIM4_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_TIM4_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800117e:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <MX_TIM4_Init+0x94>)
 8001180:	f002 fa32 	bl	80035e8 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 fce5 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_TIM4_Init+0x94>)
 800119c:	f003 f800 	bl	80041a0 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fcd7 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_TIM4_Init+0x94>)
 80011b8:	f003 fdd0 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011c2:	f000 fcc9 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000208 	.word	0x20000208
 80011d4:	40000800 	.word	0x40000800

080011d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_TIM5_Init+0x94>)
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <MX_TIM5_Init+0x98>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_TIM5_Init+0x94>)
 80011fe:	22a9      	movs	r2, #169	@ 0xa9
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_TIM5_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_TIM5_Init+0x94>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_TIM5_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_TIM5_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <MX_TIM5_Init+0x94>)
 800121e:	f002 f9e3 	bl	80035e8 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001228:	f000 fc96 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <MX_TIM5_Init+0x94>)
 800123a:	f002 ffb1 	bl	80041a0 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001244:	f000 fc88 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_TIM5_Init+0x94>)
 8001256:	f003 fd81 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001260:	f000 fc7a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000254 	.word	0x20000254
 8001270:	40000c00 	.word	0x40000c00

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <MX_GPIO_Init+0xd4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a2e      	ldr	r2, [pc, #184]	@ (8001348 <MX_GPIO_Init+0xd4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <MX_GPIO_Init+0xd4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a2:	4b29      	ldr	r3, [pc, #164]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a28      	ldr	r2, [pc, #160]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a22      	ldr	r2, [pc, #136]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_GPIO_Init+0xd4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f001 f90d 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <MX_GPIO_Init+0xd8>)
 800130e:	f000 ff7d 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001312:	2320      	movs	r3, #32
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132c:	f000 ff6e 	bl	800220c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2028      	movs	r0, #40	@ 0x28
 8001336:	f000 ff34 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800133a:	2028      	movs	r0, #40	@ 0x28
 800133c:	f000 ff4b 	bl	80021d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	@ 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	48000800 	.word	0x48000800

08001350 <HAL_TIM_PeriodElapsedCallback>:
//}


//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d108      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 8001360:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	1e54      	subs	r4, r2, #1
 8001368:	f143 0500 	adc.w	r5, r3, #0
 800136c:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800136e:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim4)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a3a      	ldr	r2, [pc, #232]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d16a      	bne.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x100>
	{
//		QEIEncoderPosVel_Update();
		timerCount++;
 800137a:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a38      	ldr	r2, [pc, #224]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001382:	6013      	str	r3, [r2, #0]
		timerPWM++;
 8001384:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a37      	ldr	r2, [pc, #220]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800138c:	6013      	str	r3, [r2, #0]
		timerPWMCurve++;
 800138e:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a35      	ldr	r2, [pc, #212]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001396:	6013      	str	r3, [r2, #0]

		if(timerCount == 1000)
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013a0:	d104      	bne.n	80013ac <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			QEIEncoderPosVel_Update();
 80013a2:	f000 f891 	bl	80014c8 <QEIEncoderPosVel_Update>
			timerCount = 0;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
		}
		if(timerPWM == 100)
 80013ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b64      	cmp	r3, #100	@ 0x64
 80013b2:	d14d      	bne.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x100>
		{
			if(timerPWMCurve == 100000)
 80013b4:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d103      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x76>
			{
				PWM = 0;
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e027      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0xc6>
			}
			else if (timerPWMCurve == 200000)
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d104      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x8a>
			{
				PWM = 400;
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e01d      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0xc6>
			}
			else if (timerPWMCurve == 300000)
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a27      	ldr	r2, [pc, #156]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d103      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x9c>
			{
				PWM = 200;
 80013e4:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013e6:	22c8      	movs	r2, #200	@ 0xc8
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e014      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0xc6>
			}
			else if (timerPWMCurve == 400000)
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d104      	bne.n	8001400 <HAL_TIM_PeriodElapsedCallback+0xb0>
			{
				PWM = 1000;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e00a      	b.n	8001416 <HAL_TIM_PeriodElapsedCallback+0xc6>
			}
			else if (timerPWMCurve == 500000)
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d105      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0xc6>
			{
				PWM = 0;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
				timerPWMCurve = 0;
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
			}

			if (start == 1)
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d109      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0xe2>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM);
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001430:	e00b      	b.n	800144a <HAL_TIM_PeriodElapsedCallback+0xfa>
			}
			else if (start == 0)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0xfa>
			{
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
			}
			timerPWM = 0;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}
 8001458:	20000254 	.word	0x20000254
 800145c:	20000310 	.word	0x20000310
 8001460:	20000208 	.word	0x20000208
 8001464:	200002b0 	.word	0x200002b0
 8001468:	200002b4 	.word	0x200002b4
 800146c:	200002b8 	.word	0x200002b8
 8001470:	000186a0 	.word	0x000186a0
 8001474:	200002ac 	.word	0x200002ac
 8001478:	00030d40 	.word	0x00030d40
 800147c:	000493e0 	.word	0x000493e0
 8001480:	00061a80 	.word	0x00061a80
 8001484:	0007a120 	.word	0x0007a120
 8001488:	200002a8 	.word	0x200002a8
 800148c:	20000170 	.word	0x20000170

08001490 <micros>:
uint64_t micros()
{
 8001490:	b4b0      	push	{r4, r5, r7}
 8001492:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <micros+0x2c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	2200      	movs	r2, #0
 800149c:	4618      	mov	r0, r3
 800149e:	4611      	mov	r1, r2
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <micros+0x30>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	1884      	adds	r4, r0, r2
 80014a8:	eb41 0503 	adc.w	r5, r1, r3
 80014ac:	4622      	mov	r2, r4
 80014ae:	462b      	mov	r3, r5
}
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bcb0      	pop	{r4, r5, r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000254 	.word	0x20000254
 80014c0:	20000310 	.word	0x20000310
 80014c4:	00000000 	.word	0x00000000

080014c8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80014cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001738 <QEIEncoderPosVel_Update+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014da:	4b98      	ldr	r3, [pc, #608]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
    Velo_Kalman_Wre[NEW] = (diffPosKalman / diffTime)* 2 * 3.14159265359 * 9.5492968 / 3072.0;
 80014e0:	4b97      	ldr	r3, [pc, #604]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 80014e2:	edd3 6a00 	vldr	s13, [r3]
 80014e6:	4b97      	ldr	r3, [pc, #604]	@ (8001744 <QEIEncoderPosVel_Update+0x27c>)
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014f4:	ee17 0a90 	vmov	r0, s15
 80014f8:	f7fe fff2 	bl	80004e0 <__aeabi_f2d>
 80014fc:	a38a      	add	r3, pc, #552	@ (adr r3, 8001728 <QEIEncoderPosVel_Update+0x260>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f845 	bl	8000590 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a388      	add	r3, pc, #544	@ (adr r3, 8001730 <QEIEncoderPosVel_Update+0x268>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f83c 	bl	8000590 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <QEIEncoderPosVel_Update+0x280>)
 8001526:	f7ff f95d 	bl	80007e4 <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fa3f 	bl	80009b4 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4a84      	ldr	r2, [pc, #528]	@ (800174c <QEIEncoderPosVel_Update+0x284>)
 800153a:	6013      	str	r3, [r2, #0]
    Pos_Kalman_Wre[NEW] = KalmanFilter(0,QEIdata.Position[NEW]);
 800153c:	4b7f      	ldr	r3, [pc, #508]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	eef0 0a67 	vmov.f32	s1, s15
 8001546:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8001750 <QEIEncoderPosVel_Update+0x288>
 800154a:	f000 f915 	bl	8001778 <KalmanFilter>
 800154e:	eef0 7a40 	vmov.f32	s15, s0
 8001552:	4b80      	ldr	r3, [pc, #512]	@ (8001754 <QEIEncoderPosVel_Update+0x28c>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
    QEIdata.TimeStamp[NEW] = micros();
 8001558:	f7ff ff9a 	bl	8001490 <micros>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4b76      	ldr	r3, [pc, #472]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001562:	60da      	str	r2, [r3, #12]
    QEIdata.Velocity[NEW] = QEIdata.QEIAngularVelocity;
 8001564:	4b75      	ldr	r3, [pc, #468]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a74      	ldr	r2, [pc, #464]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800156a:	6153      	str	r3, [r2, #20]
    diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD]) / 1000000.0f; // seconds
 800156c:	4b73      	ldr	r3, [pc, #460]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b72      	ldr	r3, [pc, #456]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8001758 <QEIEncoderPosVel_Update+0x290>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <QEIEncoderPosVel_Update+0x27c>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
    diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800158c:	4b6b      	ldr	r3, [pc, #428]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	4b6a      	ldr	r3, [pc, #424]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001594:	edd3 7a01 	vldr	s15, [r3, #4]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	4b6d      	ldr	r3, [pc, #436]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 80015a6:	601a      	str	r2, [r3, #0]
    diffVelocity = QEIdata.Velocity[NEW] - QEIdata.Velocity[OLD];
 80015a8:	4b64      	ldr	r3, [pc, #400]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 80015aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80015ae:	4b63      	ldr	r3, [pc, #396]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 80015b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80015b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <QEIEncoderPosVel_Update+0x298>)
 80015ba:	edc3 7a00 	vstr	s15, [r3]
    diffPosKalman = Pos_Kalman_Wre[NEW] - Pos_Kalman_Wre[OLD];
 80015be:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <QEIEncoderPosVel_Update+0x28c>)
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	4b63      	ldr	r3, [pc, #396]	@ (8001754 <QEIEncoderPosVel_Update+0x28c>)
 80015c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]
    diffVeloKalman = Velo_Kalman_Wre[NEW] - Velo_Kalman_Wre[OLD];
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <QEIEncoderPosVel_Update+0x284>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <QEIEncoderPosVel_Update+0x284>)
 80015dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001764 <QEIEncoderPosVel_Update+0x29c>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
    // Handle wrap-around
    if (diffPosition > 32256)
 80015ea:	4b5c      	ldr	r3, [pc, #368]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 80015f2:	dd06      	ble.n	8001602 <QEIEncoderPosVel_Update+0x13a>
        diffPosition -= 64512;
 80015f4:	4b59      	ldr	r3, [pc, #356]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 80015fc:	4a57      	ldr	r2, [pc, #348]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e00a      	b.n	8001618 <QEIEncoderPosVel_Update+0x150>
    else if (diffPosition < -32256)
 8001602:	4b56      	ldr	r3, [pc, #344]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 800160a:	da05      	bge.n	8001618 <QEIEncoderPosVel_Update+0x150>
        diffPosition += 64512;
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8001614:	4a51      	ldr	r2, [pc, #324]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 8001616:	6013      	str	r3, [r2, #0]

    if (diffPosKalman > 32256)
 8001618:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001768 <QEIEncoderPosVel_Update+0x2a0>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd0a      	ble.n	8001642 <QEIEncoderPosVel_Update+0x17a>
		diffPosKalman -= 64512;
 800162c:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800176c <QEIEncoderPosVel_Update+0x2a4>
 8001636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
 8001640:	e013      	b.n	800166a <QEIEncoderPosVel_Update+0x1a2>
	else if (diffPosKalman < -32256)
 8001642:	4b3f      	ldr	r3, [pc, #252]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001770 <QEIEncoderPosVel_Update+0x2a8>
 800164c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	d509      	bpl.n	800166a <QEIEncoderPosVel_Update+0x1a2>
		diffPosKalman += 64512;
 8001656:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800176c <QEIEncoderPosVel_Update+0x2a4>
 8001660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001664:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <QEIEncoderPosVel_Update+0x278>)
 8001666:	edc3 7a00 	vstr	s15, [r3]


    Acc_Kalman_Wre = (diffVeloKalman / diffTime);
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <QEIEncoderPosVel_Update+0x29c>)
 800166c:	edd3 6a00 	vldr	s13, [r3]
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <QEIEncoderPosVel_Update+0x27c>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <QEIEncoderPosVel_Update+0x2ac>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
    // Calculate the angular velocity
    QEIdata.QEIAngularVelocity = (diffPosition / diffTime) * 2 * 3.14159265359 * 9.5492968 / 3072.0; // rad/s (assuming 3072 counts per revolution)
 8001680:	4b36      	ldr	r3, [pc, #216]	@ (800175c <QEIEncoderPosVel_Update+0x294>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <QEIEncoderPosVel_Update+0x27c>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169a:	ee17 0a90 	vmov	r0, s15
 800169e:	f7fe ff1f 	bl	80004e0 <__aeabi_f2d>
 80016a2:	a321      	add	r3, pc, #132	@ (adr r3, 8001728 <QEIEncoderPosVel_Update+0x260>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ff72 	bl	8000590 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	a31e      	add	r3, pc, #120	@ (adr r3, 8001730 <QEIEncoderPosVel_Update+0x268>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ff69 	bl	8000590 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <QEIEncoderPosVel_Update+0x280>)
 80016cc:	f7ff f88a 	bl	80007e4 <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff f96c 	bl	80009b4 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 80016e0:	6213      	str	r3, [r2, #32]
    QEIdata.QEIAcceleration = (diffVelocity / diffTime);
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <QEIEncoderPosVel_Update+0x298>)
 80016e4:	edd3 6a00 	vldr	s13, [r3]
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <QEIEncoderPosVel_Update+0x27c>)
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 80016f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    // Use the Kalman filter to smooth the angular velocity
//    Velo_Kalman_Wre = KalmanFilter(0,QEIdata.QEIAngularVelocity);
//    Acc_Kalman_Wre = KalmanFilter(0,QEIdata.QEIAcceleration);

    // Update old values
    Pos_Kalman_Wre[OLD] =  Pos_Kalman_Wre[NEW];
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <QEIEncoderPosVel_Update+0x28c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <QEIEncoderPosVel_Update+0x28c>)
 80016fe:	6053      	str	r3, [r2, #4]
    QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001706:	6053      	str	r3, [r2, #4]
    QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 800170e:	6113      	str	r3, [r2, #16]
    QEIdata.Velocity[OLD] = QEIdata.Velocity[NEW];
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4a09      	ldr	r2, [pc, #36]	@ (800173c <QEIEncoderPosVel_Update+0x274>)
 8001716:	6193      	str	r3, [r2, #24]
    Velo_Kalman_Wre[OLD] = Velo_Kalman_Wre[NEW];
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <QEIEncoderPosVel_Update+0x284>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <QEIEncoderPosVel_Update+0x284>)
 800171e:	6053      	str	r3, [r2, #4]
//	    }
//
//	    // Store values for the next loop
//	    QEIdata.Position[OLD] = QEIdata.Position[NEW];
//	    QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f3af 8000 	nop.w
 8001728:	54442eea 	.word	0x54442eea
 800172c:	400921fb 	.word	0x400921fb
 8001730:	6e1f984c 	.word	0x6e1f984c
 8001734:	4023193d 	.word	0x4023193d
 8001738:	200001bc 	.word	0x200001bc
 800173c:	200002e0 	.word	0x200002e0
 8001740:	200002d4 	.word	0x200002d4
 8001744:	200002a0 	.word	0x200002a0
 8001748:	40a80000 	.word	0x40a80000
 800174c:	200002c0 	.word	0x200002c0
 8001750:	00000000 	.word	0x00000000
 8001754:	200002cc 	.word	0x200002cc
 8001758:	49742400 	.word	0x49742400
 800175c:	200002a4 	.word	0x200002a4
 8001760:	200002d8 	.word	0x200002d8
 8001764:	200002dc 	.word	0x200002dc
 8001768:	46fc0000 	.word	0x46fc0000
 800176c:	477c0000 	.word	0x477c0000
 8001770:	c6fc0000 	.word	0xc6fc0000
 8001774:	200002c8 	.word	0x200002c8

08001778 <KalmanFilter>:

volatile arm_status Calst;
float checkVal;

float KalmanFilter(float32_t Vin,float32_t Velocity){
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	@ 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001782:	edc7 0a00 	vstr	s1, [r7]
	  arm_mat_init_f32(&Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8001786:	463b      	mov	r3, r7
 8001788:	2201      	movs	r2, #1
 800178a:	2101      	movs	r1, #1
 800178c:	484a      	ldr	r0, [pc, #296]	@ (80018b8 <KalmanFilter+0x140>)
 800178e:	f004 fafe 	bl	8005d8e <arm_mat_init_f32>
	  // Compute Xk = Ax + Bu + Gw
	  arm_mat_scale_f32(&B_matrix, 0, &Bu_matrix); 		   				// Bu
 8001792:	494a      	ldr	r1, [pc, #296]	@ (80018bc <KalmanFilter+0x144>)
 8001794:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80018c0 <KalmanFilter+0x148>
 8001798:	484a      	ldr	r0, [pc, #296]	@ (80018c4 <KalmanFilter+0x14c>)
 800179a:	f004 ff01 	bl	80065a0 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&A_matrix, &X_k_matrix, &Ax_matrix);  		   		// Ax
 800179e:	4a4a      	ldr	r2, [pc, #296]	@ (80018c8 <KalmanFilter+0x150>)
 80017a0:	494a      	ldr	r1, [pc, #296]	@ (80018cc <KalmanFilter+0x154>)
 80017a2:	484b      	ldr	r0, [pc, #300]	@ (80018d0 <KalmanFilter+0x158>)
 80017a4:	f004 fe82 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_add_f32(&Ax_matrix, &Bu_matrix, &X_k_matrix); 		   		// Xk = Ax + Bu
 80017a8:	4a48      	ldr	r2, [pc, #288]	@ (80018cc <KalmanFilter+0x154>)
 80017aa:	4944      	ldr	r1, [pc, #272]	@ (80018bc <KalmanFilter+0x144>)
 80017ac:	4846      	ldr	r0, [pc, #280]	@ (80018c8 <KalmanFilter+0x150>)
 80017ae:	f004 fab3 	bl	8005d18 <arm_mat_add_f32>
	  arm_mat_add_f32(&X_k_matrix, &GW_matrix, &X_k_matrix);			// Xk = Ax + Bu + Gw
 80017b2:	4a46      	ldr	r2, [pc, #280]	@ (80018cc <KalmanFilter+0x154>)
 80017b4:	4947      	ldr	r1, [pc, #284]	@ (80018d4 <KalmanFilter+0x15c>)
 80017b6:	4845      	ldr	r0, [pc, #276]	@ (80018cc <KalmanFilter+0x154>)
 80017b8:	f004 faae 	bl	8005d18 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&A_matrix, &P_k_matrix, &P_k_matrix);  		   		// Pk = A * P_pk
 80017bc:	4a46      	ldr	r2, [pc, #280]	@ (80018d8 <KalmanFilter+0x160>)
 80017be:	4946      	ldr	r1, [pc, #280]	@ (80018d8 <KalmanFilter+0x160>)
 80017c0:	4843      	ldr	r0, [pc, #268]	@ (80018d0 <KalmanFilter+0x158>)
 80017c2:	f004 fe73 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_mult_f32(&P_k_matrix, &A_transpose_matrix, &P_k_matrix); 		// Pk = A * P_pk * A^T
 80017c6:	4a44      	ldr	r2, [pc, #272]	@ (80018d8 <KalmanFilter+0x160>)
 80017c8:	4944      	ldr	r1, [pc, #272]	@ (80018dc <KalmanFilter+0x164>)
 80017ca:	4843      	ldr	r0, [pc, #268]	@ (80018d8 <KalmanFilter+0x160>)
 80017cc:	f004 fe6e 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_mult_f32(&G_matrix, &G_transpose_matrix, &GGT_matrix);        // G * G^T
 80017d0:	4a43      	ldr	r2, [pc, #268]	@ (80018e0 <KalmanFilter+0x168>)
 80017d2:	4944      	ldr	r1, [pc, #272]	@ (80018e4 <KalmanFilter+0x16c>)
 80017d4:	4844      	ldr	r0, [pc, #272]	@ (80018e8 <KalmanFilter+0x170>)
 80017d6:	f004 fe69 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_scale_f32(&GGT_matrix, Q, &GQGT_matrix); 				   	   	// G * Q
 80017da:	4b44      	ldr	r3, [pc, #272]	@ (80018ec <KalmanFilter+0x174>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	4943      	ldr	r1, [pc, #268]	@ (80018f0 <KalmanFilter+0x178>)
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	483e      	ldr	r0, [pc, #248]	@ (80018e0 <KalmanFilter+0x168>)
 80017e8:	f004 feda 	bl	80065a0 <arm_mat_scale_f32>
	  arm_mat_add_f32(&P_k_matrix, &GQGT_matrix, &P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80017ec:	4a3a      	ldr	r2, [pc, #232]	@ (80018d8 <KalmanFilter+0x160>)
 80017ee:	4940      	ldr	r1, [pc, #256]	@ (80018f0 <KalmanFilter+0x178>)
 80017f0:	4839      	ldr	r0, [pc, #228]	@ (80018d8 <KalmanFilter+0x160>)
 80017f2:	f004 fa91 	bl	8005d18 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&C_matrix, &P_k_matrix, &CP_matrix);			     // C * Pk
 80017f6:	4a3f      	ldr	r2, [pc, #252]	@ (80018f4 <KalmanFilter+0x17c>)
 80017f8:	4937      	ldr	r1, [pc, #220]	@ (80018d8 <KalmanFilter+0x160>)
 80017fa:	483f      	ldr	r0, [pc, #252]	@ (80018f8 <KalmanFilter+0x180>)
 80017fc:	f004 fe56 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_mult_f32(&CP_matrix, &C_transpose_matrix, &CPCT_matrix);   // C * Pk * C^T
 8001800:	4a3e      	ldr	r2, [pc, #248]	@ (80018fc <KalmanFilter+0x184>)
 8001802:	493f      	ldr	r1, [pc, #252]	@ (8001900 <KalmanFilter+0x188>)
 8001804:	483b      	ldr	r0, [pc, #236]	@ (80018f4 <KalmanFilter+0x17c>)
 8001806:	f004 fe51 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_add_f32(&CPCT_matrix, &R_matrix, &CPCTR_matrix);			 // C * P_k * C^T + R
 800180a:	4a3e      	ldr	r2, [pc, #248]	@ (8001904 <KalmanFilter+0x18c>)
 800180c:	493e      	ldr	r1, [pc, #248]	@ (8001908 <KalmanFilter+0x190>)
 800180e:	483b      	ldr	r0, [pc, #236]	@ (80018fc <KalmanFilter+0x184>)
 8001810:	f004 fa82 	bl	8005d18 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&CPCTR_matrix, &CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8001814:	493d      	ldr	r1, [pc, #244]	@ (800190c <KalmanFilter+0x194>)
 8001816:	483b      	ldr	r0, [pc, #236]	@ (8001904 <KalmanFilter+0x18c>)
 8001818:	f004 fad1 	bl	8005dbe <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&P_k_matrix, &C_transpose_matrix, &PCT_matrix); 		 // P_k * C^T
 800181c:	4a3c      	ldr	r2, [pc, #240]	@ (8001910 <KalmanFilter+0x198>)
 800181e:	4938      	ldr	r1, [pc, #224]	@ (8001900 <KalmanFilter+0x188>)
 8001820:	482d      	ldr	r0, [pc, #180]	@ (80018d8 <KalmanFilter+0x160>)
 8001822:	f004 fe43 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_mult_f32(&PCT_matrix, &CPCTRinv_matrix, &K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8001826:	4a3b      	ldr	r2, [pc, #236]	@ (8001914 <KalmanFilter+0x19c>)
 8001828:	4938      	ldr	r1, [pc, #224]	@ (800190c <KalmanFilter+0x194>)
 800182a:	4839      	ldr	r0, [pc, #228]	@ (8001910 <KalmanFilter+0x198>)
 800182c:	f004 fe3e 	bl	80064ac <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Cx_matrix);				 // C * X_k
 8001830:	4a39      	ldr	r2, [pc, #228]	@ (8001918 <KalmanFilter+0x1a0>)
 8001832:	4926      	ldr	r1, [pc, #152]	@ (80018cc <KalmanFilter+0x154>)
 8001834:	4830      	ldr	r0, [pc, #192]	@ (80018f8 <KalmanFilter+0x180>)
 8001836:	f004 fe39 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_sub_f32(&Velocity_matrix,  &Cx_matrix, &yCx_matrix);			  // y - ( C * X_k )
 800183a:	4a38      	ldr	r2, [pc, #224]	@ (800191c <KalmanFilter+0x1a4>)
 800183c:	4936      	ldr	r1, [pc, #216]	@ (8001918 <KalmanFilter+0x1a0>)
 800183e:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <KalmanFilter+0x140>)
 8001840:	f004 fee4 	bl	800660c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&K_matrix, &yCx_matrix, &KyCx_matrix);		     // K( y - ( C * X_k ) )
 8001844:	4a36      	ldr	r2, [pc, #216]	@ (8001920 <KalmanFilter+0x1a8>)
 8001846:	4935      	ldr	r1, [pc, #212]	@ (800191c <KalmanFilter+0x1a4>)
 8001848:	4832      	ldr	r0, [pc, #200]	@ (8001914 <KalmanFilter+0x19c>)
 800184a:	f004 fe2f 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_add_f32(&X_k_matrix, &KyCx_matrix, &X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 800184e:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <KalmanFilter+0x154>)
 8001850:	4933      	ldr	r1, [pc, #204]	@ (8001920 <KalmanFilter+0x1a8>)
 8001852:	481e      	ldr	r0, [pc, #120]	@ (80018cc <KalmanFilter+0x154>)
 8001854:	f004 fa60 	bl	8005d18 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Output_matrix);
 8001858:	4a32      	ldr	r2, [pc, #200]	@ (8001924 <KalmanFilter+0x1ac>)
 800185a:	491c      	ldr	r1, [pc, #112]	@ (80018cc <KalmanFilter+0x154>)
 800185c:	4826      	ldr	r0, [pc, #152]	@ (80018f8 <KalmanFilter+0x180>)
 800185e:	f004 fe25 	bl	80064ac <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[9];
	  arm_mat_init_f32(&temp_matrix4, 3, 3,(float32_t*) &temp_data4);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800186a:	2203      	movs	r2, #3
 800186c:	2103      	movs	r1, #3
 800186e:	f004 fa8e 	bl	8005d8e <arm_mat_init_f32>

	  arm_mat_mult_f32(&K_matrix, &C_matrix, &temp_matrix4);				// K * C
 8001872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001876:	461a      	mov	r2, r3
 8001878:	491f      	ldr	r1, [pc, #124]	@ (80018f8 <KalmanFilter+0x180>)
 800187a:	4826      	ldr	r0, [pc, #152]	@ (8001914 <KalmanFilter+0x19c>)
 800187c:	f004 fe16 	bl	80064ac <arm_mat_mult_f32>
	  arm_mat_sub_f32(&I_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8001880:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001884:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001888:	4619      	mov	r1, r3
 800188a:	4827      	ldr	r0, [pc, #156]	@ (8001928 <KalmanFilter+0x1b0>)
 800188c:	f004 febe 	bl	800660c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &P_k_matrix, &P_k_matrix);			// (I - (K * C)) * P_k
 8001890:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001894:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <KalmanFilter+0x160>)
 8001896:	4910      	ldr	r1, [pc, #64]	@ (80018d8 <KalmanFilter+0x160>)
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fe07 	bl	80064ac <arm_mat_mult_f32>
	  Kalman_Speed = X_k[1];
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <KalmanFilter+0x1b4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <KalmanFilter+0x1b8>)
 80018a4:	6013      	str	r3, [r2, #0]
	  return  Kalman_Speed;
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <KalmanFilter+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	ee07 3a90 	vmov	s15, r3
}
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	3738      	adds	r7, #56	@ 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200004e0 	.word	0x200004e0
 80018bc:	20000418 	.word	0x20000418
 80018c0:	00000000 	.word	0x00000000
 80018c4:	2000038c 	.word	0x2000038c
 80018c8:	2000042c 	.word	0x2000042c
 80018cc:	20000340 	.word	0x20000340
 80018d0:	20000374 	.word	0x20000374
 80018d4:	2000032c 	.word	0x2000032c
 80018d8:	2000036c 	.word	0x2000036c
 80018dc:	2000037c 	.word	0x2000037c
 80018e0:	200003c0 	.word	0x200003c0
 80018e4:	200003ac 	.word	0x200003ac
 80018e8:	200003a4 	.word	0x200003a4
 80018ec:	200000a8 	.word	0x200000a8
 80018f0:	200003ec 	.word	0x200003ec
 80018f4:	20000440 	.word	0x20000440
 80018f8:	20000394 	.word	0x20000394
 80018fc:	20000454 	.word	0x20000454
 8001900:	2000039c 	.word	0x2000039c
 8001904:	20000460 	.word	0x20000460
 8001908:	200004cc 	.word	0x200004cc
 800190c:	20000494 	.word	0x20000494
 8001910:	20000480 	.word	0x20000480
 8001914:	2000046c 	.word	0x2000046c
 8001918:	200004a0 	.word	0x200004a0
 800191c:	200004ac 	.word	0x200004ac
 8001920:	200004b8 	.word	0x200004b8
 8001924:	200003b8 	.word	0x200003b8
 8001928:	20000384 	.word	0x20000384
 800192c:	20000334 	.word	0x20000334
 8001930:	200004e8 	.word	0x200004e8

08001934 <Kalman_Start>:
void Kalman_Start(){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	arm_mat_init_f32(&X_k_matrix, 3, 1,(float32_t*) &X_k);
 8001938:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <Kalman_Start+0x14c>)
 800193a:	2201      	movs	r2, #1
 800193c:	2103      	movs	r1, #3
 800193e:	4851      	ldr	r0, [pc, #324]	@ (8001a84 <Kalman_Start+0x150>)
 8001940:	f004 fa25 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&P_k_matrix, 3, 3,(float32_t*) &P_k);
 8001944:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <Kalman_Start+0x154>)
 8001946:	2203      	movs	r2, #3
 8001948:	2103      	movs	r1, #3
 800194a:	4850      	ldr	r0, [pc, #320]	@ (8001a8c <Kalman_Start+0x158>)
 800194c:	f004 fa1f 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&W_k_matrix, 3, 1,(float32_t*) &W_k);
 8001950:	4b4f      	ldr	r3, [pc, #316]	@ (8001a90 <Kalman_Start+0x15c>)
 8001952:	2201      	movs	r2, #1
 8001954:	2103      	movs	r1, #3
 8001956:	484f      	ldr	r0, [pc, #316]	@ (8001a94 <Kalman_Start+0x160>)
 8001958:	f004 fa19 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&A_matrix, 3, 3,(float32_t*) &A);
 800195c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <Kalman_Start+0x164>)
 800195e:	2203      	movs	r2, #3
 8001960:	2103      	movs	r1, #3
 8001962:	484e      	ldr	r0, [pc, #312]	@ (8001a9c <Kalman_Start+0x168>)
 8001964:	f004 fa13 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, 3, 1,(float32_t*) &B);
 8001968:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa0 <Kalman_Start+0x16c>)
 800196a:	2201      	movs	r2, #1
 800196c:	2103      	movs	r1, #3
 800196e:	484d      	ldr	r0, [pc, #308]	@ (8001aa4 <Kalman_Start+0x170>)
 8001970:	f004 fa0d 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&C_matrix, 1, 3,(float32_t*) &C);
 8001974:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <Kalman_Start+0x174>)
 8001976:	2203      	movs	r2, #3
 8001978:	2101      	movs	r1, #1
 800197a:	484c      	ldr	r0, [pc, #304]	@ (8001aac <Kalman_Start+0x178>)
 800197c:	f004 fa07 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&G_matrix, 3, 1,(float32_t*) &G);
 8001980:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <Kalman_Start+0x17c>)
 8001982:	2201      	movs	r2, #1
 8001984:	2103      	movs	r1, #3
 8001986:	484b      	ldr	r0, [pc, #300]	@ (8001ab4 <Kalman_Start+0x180>)
 8001988:	f004 fa01 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&A_transpose_matrix, 3, 3,(float32_t*) &A_transpose);
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <Kalman_Start+0x184>)
 800198e:	2203      	movs	r2, #3
 8001990:	2103      	movs	r1, #3
 8001992:	484a      	ldr	r0, [pc, #296]	@ (8001abc <Kalman_Start+0x188>)
 8001994:	f004 f9fb 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose_matrix, 3, 1,(float32_t*) &C_transpose);
 8001998:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <Kalman_Start+0x18c>)
 800199a:	2201      	movs	r2, #1
 800199c:	2103      	movs	r1, #3
 800199e:	4849      	ldr	r0, [pc, #292]	@ (8001ac4 <Kalman_Start+0x190>)
 80019a0:	f004 f9f5 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&G_transpose_matrix, 1, 3,(float32_t*) &G_transpose);
 80019a4:	4b48      	ldr	r3, [pc, #288]	@ (8001ac8 <Kalman_Start+0x194>)
 80019a6:	2203      	movs	r2, #3
 80019a8:	2101      	movs	r1, #1
 80019aa:	4848      	ldr	r0, [pc, #288]	@ (8001acc <Kalman_Start+0x198>)
 80019ac:	f004 f9ef 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&GGT_matrix, 3, 3,(float32_t*) &GGT);
 80019b0:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <Kalman_Start+0x19c>)
 80019b2:	2203      	movs	r2, #3
 80019b4:	2103      	movs	r1, #3
 80019b6:	4847      	ldr	r0, [pc, #284]	@ (8001ad4 <Kalman_Start+0x1a0>)
 80019b8:	f004 f9e9 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&GQGT_matrix, 3, 3,(float32_t*) &GQGT);
 80019bc:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <Kalman_Start+0x1a4>)
 80019be:	2203      	movs	r2, #3
 80019c0:	2103      	movs	r1, #3
 80019c2:	4846      	ldr	r0, [pc, #280]	@ (8001adc <Kalman_Start+0x1a8>)
 80019c4:	f004 f9e3 	bl	8005d8e <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&Bu_matrix, 3, 1,(float32_t*) &Bu_data);
 80019c8:	4b45      	ldr	r3, [pc, #276]	@ (8001ae0 <Kalman_Start+0x1ac>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	2103      	movs	r1, #3
 80019ce:	4845      	ldr	r0, [pc, #276]	@ (8001ae4 <Kalman_Start+0x1b0>)
 80019d0:	f004 f9dd 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&Ax_matrix, 3, 1,(float32_t*) &Ax_data);
 80019d4:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <Kalman_Start+0x1b4>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	2103      	movs	r1, #3
 80019da:	4844      	ldr	r0, [pc, #272]	@ (8001aec <Kalman_Start+0x1b8>)
 80019dc:	f004 f9d7 	bl	8005d8e <arm_mat_init_f32>
//	arm_mat_init_f32(&GW_matrix, 3, 1,(float32_t*) &GW_);

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&CP_matrix, 1, 3,(float32_t*) &CP);
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <Kalman_Start+0x1bc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	2101      	movs	r1, #1
 80019e6:	4843      	ldr	r0, [pc, #268]	@ (8001af4 <Kalman_Start+0x1c0>)
 80019e8:	f004 f9d1 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&CPCT_matrix, 1, 1,(float32_t*) &CPCT);
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <Kalman_Start+0x1c4>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	2101      	movs	r1, #1
 80019f2:	4842      	ldr	r0, [pc, #264]	@ (8001afc <Kalman_Start+0x1c8>)
 80019f4:	f004 f9cb 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&CPCTR_matrix, 1, 1,(float32_t*) &CPCTR);
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <Kalman_Start+0x1cc>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	2101      	movs	r1, #1
 80019fe:	4841      	ldr	r0, [pc, #260]	@ (8001b04 <Kalman_Start+0x1d0>)
 8001a00:	f004 f9c5 	bl	8005d8e <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&K_matrix, 3, 1,(float32_t*) &K);
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <Kalman_Start+0x1d4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4840      	ldr	r0, [pc, #256]	@ (8001b0c <Kalman_Start+0x1d8>)
 8001a0c:	f004 f9bf 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&PCT_matrix, 3, 1,(float32_t*) &PCT);
 8001a10:	4b3f      	ldr	r3, [pc, #252]	@ (8001b10 <Kalman_Start+0x1dc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	2103      	movs	r1, #3
 8001a16:	483f      	ldr	r0, [pc, #252]	@ (8001b14 <Kalman_Start+0x1e0>)
 8001a18:	f004 f9b9 	bl	8005d8e <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&CPCTRinv_matrix, 1, 1,(float32_t*) &CPCTRinv);
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <Kalman_Start+0x1e4>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2101      	movs	r1, #1
 8001a22:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <Kalman_Start+0x1e8>)
 8001a24:	f004 f9b3 	bl	8005d8e <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&Cx_matrix, 1, 1,(float32_t*) &Cx);
 8001a28:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <Kalman_Start+0x1ec>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	483d      	ldr	r0, [pc, #244]	@ (8001b24 <Kalman_Start+0x1f0>)
 8001a30:	f004 f9ad 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&yCx_matrix, 1, 1,(float32_t*) &yCx);
 8001a34:	4b3c      	ldr	r3, [pc, #240]	@ (8001b28 <Kalman_Start+0x1f4>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	2101      	movs	r1, #1
 8001a3a:	483c      	ldr	r0, [pc, #240]	@ (8001b2c <Kalman_Start+0x1f8>)
 8001a3c:	f004 f9a7 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&KyCx_matrix, 3, 1,(float32_t*) &KyCx);
 8001a40:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <Kalman_Start+0x1fc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	2103      	movs	r1, #3
 8001a46:	483b      	ldr	r0, [pc, #236]	@ (8001b34 <Kalman_Start+0x200>)
 8001a48:	f004 f9a1 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&Output_matrix, 1, 1,(float32_t*) &Es_velocity);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <Kalman_Start+0x204>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2101      	movs	r1, #1
 8001a52:	483a      	ldr	r0, [pc, #232]	@ (8001b3c <Kalman_Start+0x208>)
 8001a54:	f004 f99b 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&I_matrix, 3, 3,(float32_t*) &I);
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <Kalman_Start+0x20c>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	4839      	ldr	r0, [pc, #228]	@ (8001b44 <Kalman_Start+0x210>)
 8001a60:	f004 f995 	bl	8005d8e <arm_mat_init_f32>

	arm_mat_init_f32(&R_matrix, 1, 1,(float32_t*) &R);
 8001a64:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <Kalman_Start+0x214>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4838      	ldr	r0, [pc, #224]	@ (8001b4c <Kalman_Start+0x218>)
 8001a6c:	f004 f98f 	bl	8005d8e <arm_mat_init_f32>
	arm_mat_init_f32(&Z_matrix, 1, 1,(float32_t*) &Z);
 8001a70:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <Kalman_Start+0x21c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	2101      	movs	r1, #1
 8001a76:	4837      	ldr	r0, [pc, #220]	@ (8001b54 <Kalman_Start+0x220>)
 8001a78:	f004 f989 	bl	8005d8e <arm_mat_init_f32>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000334 	.word	0x20000334
 8001a84:	20000340 	.word	0x20000340
 8001a88:	20000348 	.word	0x20000348
 8001a8c:	2000036c 	.word	0x2000036c
 8001a90:	20000318 	.word	0x20000318
 8001a94:	20000324 	.word	0x20000324
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000374 	.word	0x20000374
 8001aa0:	2000006c 	.word	0x2000006c
 8001aa4:	2000038c 	.word	0x2000038c
 8001aa8:	20000078 	.word	0x20000078
 8001aac:	20000394 	.word	0x20000394
 8001ab0:	20000090 	.word	0x20000090
 8001ab4:	200003a4 	.word	0x200003a4
 8001ab8:	20000024 	.word	0x20000024
 8001abc:	2000037c 	.word	0x2000037c
 8001ac0:	20000084 	.word	0x20000084
 8001ac4:	2000039c 	.word	0x2000039c
 8001ac8:	2000009c 	.word	0x2000009c
 8001acc:	200003ac 	.word	0x200003ac
 8001ad0:	200003c8 	.word	0x200003c8
 8001ad4:	200003c0 	.word	0x200003c0
 8001ad8:	200003f4 	.word	0x200003f4
 8001adc:	200003ec 	.word	0x200003ec
 8001ae0:	20000420 	.word	0x20000420
 8001ae4:	20000418 	.word	0x20000418
 8001ae8:	20000434 	.word	0x20000434
 8001aec:	2000042c 	.word	0x2000042c
 8001af0:	20000448 	.word	0x20000448
 8001af4:	20000440 	.word	0x20000440
 8001af8:	2000045c 	.word	0x2000045c
 8001afc:	20000454 	.word	0x20000454
 8001b00:	20000468 	.word	0x20000468
 8001b04:	20000460 	.word	0x20000460
 8001b08:	20000474 	.word	0x20000474
 8001b0c:	2000046c 	.word	0x2000046c
 8001b10:	20000488 	.word	0x20000488
 8001b14:	20000480 	.word	0x20000480
 8001b18:	2000049c 	.word	0x2000049c
 8001b1c:	20000494 	.word	0x20000494
 8001b20:	200004a8 	.word	0x200004a8
 8001b24:	200004a0 	.word	0x200004a0
 8001b28:	200004b4 	.word	0x200004b4
 8001b2c:	200004ac 	.word	0x200004ac
 8001b30:	200004c0 	.word	0x200004c0
 8001b34:	200004b8 	.word	0x200004b8
 8001b38:	200003b4 	.word	0x200003b4
 8001b3c:	200003b8 	.word	0x200003b8
 8001b40:	20000048 	.word	0x20000048
 8001b44:	20000384 	.word	0x20000384
 8001b48:	200000ac 	.word	0x200000ac
 8001b4c:	200004cc 	.word	0x200004cc
 8001b50:	200004dc 	.word	0x200004dc
 8001b54:	200004d4 	.word	0x200004d4

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_MspInit+0x44>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b9a:	f000 fd99 	bl	80026d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b09e      	sub	sp, #120	@ 0x78
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2254      	movs	r2, #84	@ 0x54
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fd58 	bl	8006682 <memset>
  if(huart->Instance==LPUART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_UART_MspInit+0xa8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d136      	bne.n	8001c4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 faaf 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff ffb0 	bl	8001b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	4a10      	ldr	r2, [pc, #64]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_UART_MspInit+0xac>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c46:	f000 fae1 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3778      	adds	r7, #120	@ 0x78
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40008000 	.word	0x40008000
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x9c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10c      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c86:	e032      	b.n	8001cee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <HAL_TIM_Base_MspInit+0xa4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d114      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201e      	movs	r0, #30
 8001cb0:	f000 fa77 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb4:	201e      	movs	r0, #30
 8001cb6:	f000 fa8e 	bl	80021d6 <HAL_NVIC_EnableIRQ>
}
 8001cba:	e018      	b.n	8001cee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a10      	ldr	r2, [pc, #64]	@ (8001d04 <HAL_TIM_Base_MspInit+0xa8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d113      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_TIM_Base_MspInit+0xa0>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2032      	movs	r0, #50	@ 0x32
 8001ce4:	f000 fa5d 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ce8:	2032      	movs	r0, #50	@ 0x32
 8001cea:	f000 fa74 	bl	80021d6 <HAL_NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00

08001d08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d128      	bne.n	8001d7c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d78:	f000 fa48 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	@ 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <HAL_TIM_MspPostInit+0x64>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11b      	bne.n	8001de6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a10      	ldr	r2, [pc, #64]	@ (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001de2:	f000 fa13 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000800 	.word	0x48000800

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 f8ad 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <TIM4_IRQHandler+0x10>)
 8001e62:	f001 ff39 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000208 	.word	0x20000208

08001e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e78:	f000 fb62 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <TIM5_IRQHandler+0x10>)
 8001e86:	f001 ff27 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000254 	.word	0x20000254

08001e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <SystemInit+0x20>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <SystemInit+0x20>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb8:	480d      	ldr	r0, [pc, #52]	@ (8001ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff ffea 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ec2:	490d      	ldr	r1, [pc, #52]	@ (8001ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <LoopForever+0xe>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f04 <LoopForever+0x16>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f004 fbd5 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eea:	f7fe ff2b 	bl	8000d44 <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   r0, =_estack
 8001ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001efc:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 8001f00:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001f04:	200004f0 	.word	0x200004f0

08001f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_2_IRQHandler>

08001f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f939 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fe1a 	bl	8001b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]

}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_InitTick+0x6c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <HAL_InitTick+0x68>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f944 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d809      	bhi.n	8001f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f76:	2200      	movs	r2, #0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7e:	f000 f910 	bl	80021a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_InitTick+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e004      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200000b8 	.word	0x200000b8
 8001fa8:	200000b0 	.word	0x200000b0
 8001fac:	200000b4 	.word	0x200000b4

08001fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_IncTick+0x20>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a03      	ldr	r2, [pc, #12]	@ (8001fcc <HAL_IncTick+0x1c>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200004ec 	.word	0x200004ec
 8001fd0:	200000b8 	.word	0x200000b8

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200004ec 	.word	0x200004ec

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	@ (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff40 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff90 	bl	80020e0 <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5f 	bl	800208c <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff33 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa4 	bl	8002148 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221a:	e15a      	b.n	80024d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 814c 	beq.w	80024cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002248:	2b02      	cmp	r3, #2
 800224a:	d130      	bne.n	80022ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002282:	2201      	movs	r2, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0201 	and.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d017      	beq.n	80022ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d123      	bne.n	800233e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	6939      	ldr	r1, [r7, #16]
 800233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002380:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <HAL_GPIO_Init+0x2e4>)
 8002382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002384:	4a5a      	ldr	r2, [pc, #360]	@ (80024f0 <HAL_GPIO_Init+0x2e4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6613      	str	r3, [r2, #96]	@ 0x60
 800238c:	4b58      	ldr	r3, [pc, #352]	@ (80024f0 <HAL_GPIO_Init+0x2e4>)
 800238e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002398:	4a56      	ldr	r2, [pc, #344]	@ (80024f4 <HAL_GPIO_Init+0x2e8>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c2:	d01f      	beq.n	8002404 <HAL_GPIO_Init+0x1f8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a4c      	ldr	r2, [pc, #304]	@ (80024f8 <HAL_GPIO_Init+0x2ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d019      	beq.n	8002400 <HAL_GPIO_Init+0x1f4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4b      	ldr	r2, [pc, #300]	@ (80024fc <HAL_GPIO_Init+0x2f0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1f0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002500 <HAL_GPIO_Init+0x2f4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1ec>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <HAL_GPIO_Init+0x2f8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1e8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_GPIO_Init+0x2fc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1e4>
 80023ec:	2305      	movs	r3, #5
 80023ee:	e00a      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f0:	2306      	movs	r3, #6
 80023f2:	e008      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e006      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e004      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 8002404:	2300      	movs	r3, #0
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002416:	4937      	ldr	r1, [pc, #220]	@ (80024f4 <HAL_GPIO_Init+0x2e8>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_GPIO_Init+0x300>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002448:	4a30      	ldr	r2, [pc, #192]	@ (800250c <HAL_GPIO_Init+0x300>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_GPIO_Init+0x300>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002472:	4a26      	ldr	r2, [pc, #152]	@ (800250c <HAL_GPIO_Init+0x300>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_GPIO_Init+0x300>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800249c:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <HAL_GPIO_Init+0x300>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_GPIO_Init+0x300>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c6:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_GPIO_Init+0x300>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae9d 	bne.w	800221c <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	48000c00 	.word	0x48000c00
 8002504:	48001000 	.word	0x48001000
 8002508:	48001400 	.word	0x48001400
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e002      	b.n	8002534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f806 	bl	8002570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d141      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002596:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a2:	d131      	bne.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a4:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	4a46      	ldr	r2, [pc, #280]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b4:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025bc:	4a41      	ldr	r2, [pc, #260]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c4:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2232      	movs	r2, #50	@ 0x32
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	3301      	adds	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025da:	e002      	b.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3b01      	subs	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e2:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ee:	d102      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f2      	bne.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f6:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002602:	d158      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e057      	b.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002608:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800260e:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002618:	e04d      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002620:	d141      	bne.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002622:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d131      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002636:	4a23      	ldr	r2, [pc, #140]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002648:	4a1e      	ldr	r2, [pc, #120]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800264e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2232      	movs	r2, #50	@ 0x32
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	e002      	b.n	800266e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3b01      	subs	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267a:	d102      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f2      	bne.n	8002668 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268e:	d112      	bne.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e011      	b.n	80026b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026a4:	e007      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a6:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40007000 	.word	0x40007000
 80026c8:	200000b0 	.word	0x200000b0
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026de:	6093      	str	r3, [r2, #8]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40007000 	.word	0x40007000

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e2fe      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d075      	beq.n	80027fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	4b97      	ldr	r3, [pc, #604]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002718:	4b94      	ldr	r3, [pc, #592]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d102      	bne.n	800272e <HAL_RCC_OscConfig+0x3e>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d002      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b8d      	ldr	r3, [pc, #564]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d157      	bne.n	80027f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2d9      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x74>
 8002756:	4b85      	ldr	r3, [pc, #532]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a84      	ldr	r2, [pc, #528]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x98>
 800276e:	4b7f      	ldr	r3, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b7c      	ldr	r3, [pc, #496]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002788:	4b78      	ldr	r3, [pc, #480]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a77      	ldr	r2, [pc, #476]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b75      	ldr	r3, [pc, #468]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a74      	ldr	r2, [pc, #464]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff fc14 	bl	8001fd4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fc10 	bl	8001fd4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e29e      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c2:	4b6a      	ldr	r3, [pc, #424]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff fc00 	bl	8001fd4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff fbfc 	bl	8001fd4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	@ 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e28a      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ea:	4b60      	ldr	r3, [pc, #384]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0xe8>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d075      	beq.n	80028f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002806:	4b59      	ldr	r3, [pc, #356]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002810:	4b56      	ldr	r3, [pc, #344]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d102      	bne.n	8002826 <HAL_RCC_OscConfig+0x136>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d002      	beq.n	800282c <HAL_RCC_OscConfig+0x13c>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d11f      	bne.n	800286c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	4b4f      	ldr	r3, [pc, #316]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x154>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e25d      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b49      	ldr	r3, [pc, #292]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4946      	ldr	r1, [pc, #280]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002858:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb6d 	bl	8001f3c <HAL_InitTick>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d043      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e249      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3c      	ldr	r2, [pc, #240]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff fba8 	bl	8001fd4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff fba4 	bl	8001fd4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e232      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289a:	4b34      	ldr	r3, [pc, #208]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	492d      	ldr	r1, [pc, #180]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
 80028ba:	e01a      	b.n	80028f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028bc:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80028c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff fb84 	bl	8001fd4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d0:	f7ff fb80 	bl	8001fd4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e20e      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e2:	4b22      	ldr	r3, [pc, #136]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1e0>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d041      	beq.n	8002982 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01c      	beq.n	8002940 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7ff fb5d 	bl	8001fd4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7ff fb59 	bl	8001fd4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1e7      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002930:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ef      	beq.n	800291e <HAL_RCC_OscConfig+0x22e>
 800293e:	e020      	b.n	8002982 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7ff fb40 	bl	8001fd4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002956:	e00d      	b.n	8002974 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002958:	f7ff fb3c 	bl	8001fd4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d906      	bls.n	8002974 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1ca      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	200000b4 	.word	0x200000b4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002974:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ea      	bne.n	8002958 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a6 	beq.w	8002adc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002994:	4b84      	ldr	r3, [pc, #528]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2b4>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x2b6>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c6:	4b79      	ldr	r3, [pc, #484]	@ (8002bac <HAL_RCC_OscConfig+0x4bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d2:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x4bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x4bc>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff faf9 	bl	8001fd4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7ff faf5 	bl	8001fd4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e183      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <HAL_RCC_OscConfig+0x4bc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x32e>
 8002a0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a65      	ldr	r2, [pc, #404]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1c:	e024      	b.n	8002a68 <HAL_RCC_OscConfig+0x378>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d110      	bne.n	8002a48 <HAL_RCC_OscConfig+0x358>
 8002a26:	4b60      	ldr	r3, [pc, #384]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a46:	e00f      	b.n	8002a68 <HAL_RCC_OscConfig+0x378>
 8002a48:	4b57      	ldr	r3, [pc, #348]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d016      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7ff fab0 	bl	8001fd4 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7ff faac 	bl	8001fd4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e138      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ed      	beq.n	8002a78 <HAL_RCC_OscConfig+0x388>
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7ff fa99 	bl	8001fd4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7ff fa95 	bl	8001fd4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e121      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ed      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aca:	7ffb      	ldrb	r3, [r7, #31]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b35      	ldr	r3, [pc, #212]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad4:	4a34      	ldr	r2, [pc, #208]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d03c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af6:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff fa68 	bl	8001fd4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b08:	f7ff fa64 	bl	8001fd4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0f2      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <HAL_RCC_OscConfig+0x418>
 8002b28:	e01b      	b.n	8002b62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7ff fa4b 	bl	8001fd4 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b42:	f7ff fa47 	bl	8001fd4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0d5      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b54:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ef      	bne.n	8002b42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80c9 	beq.w	8002cfe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	f000 8083 	beq.w	8002c80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d15e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7ff fa21 	bl	8001fd4 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7ff fa1d 	bl	8001fd4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d905      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0ab      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ec      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	4b52      	ldr	r3, [pc, #328]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <HAL_RCC_OscConfig+0x61c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6a11      	ldr	r1, [r2, #32]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bd6:	0212      	lsls	r2, r2, #8
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bde:	0852      	lsrs	r2, r2, #1
 8002be0:	3a01      	subs	r2, #1
 8002be2:	0552      	lsls	r2, r2, #21
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bea:	0852      	lsrs	r2, r2, #1
 8002bec:	3a01      	subs	r2, #1
 8002bee:	0652      	lsls	r2, r2, #25
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bf6:	06d2      	lsls	r2, r2, #27
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	4943      	ldr	r1, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a40      	ldr	r2, [pc, #256]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a3d      	ldr	r2, [pc, #244]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f9dc 	bl	8001fd4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7ff f9d8 	bl	8001fd4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e066      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	4b35      	ldr	r3, [pc, #212]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x530>
 8002c3e:	e05e      	b.n	8002cfe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a30      	ldr	r2, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f9c2 	bl	8001fd4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff f9be 	bl	8001fd4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04c      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c66:	4b28      	ldr	r3, [pc, #160]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c72:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	4924      	ldr	r1, [pc, #144]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_RCC_OscConfig+0x620>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]
 8002c7e:	e03e      	b.n	8002cfe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e039      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d12c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	3b01      	subs	r3, #1
 8002cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d123      	bne.n	8002cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d11b      	bne.n	8002cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d113      	bne.n	8002cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	019f800c 	.word	0x019f800c
 8002d10:	feeefffc 	.word	0xfeeefffc

08002d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e11e      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b91      	ldr	r3, [pc, #580]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	498c      	ldr	r1, [pc, #560]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e106      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d073      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d129      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d70:	4b81      	ldr	r3, [pc, #516]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0f4      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d80:	f000 f99e 	bl	80030c0 <RCC_GetSysClockFreqFromPLLSource>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4a7c      	ldr	r2, [pc, #496]	@ (8002f7c <HAL_RCC_ClockConfig+0x268>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d93f      	bls.n	8002e0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d033      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d12f      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dae:	4b72      	ldr	r3, [pc, #456]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002db6:	4a70      	ldr	r2, [pc, #448]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e024      	b.n	8002e0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0c6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0be      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002dec:	f000 f8ce 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4a61      	ldr	r2, [pc, #388]	@ (8002f7c <HAL_RCC_ClockConfig+0x268>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d909      	bls.n	8002e0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e02:	4a5d      	ldr	r2, [pc, #372]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4957      	ldr	r1, [pc, #348]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7ff f8d8 	bl	8001fd4 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7ff f8d4 	bl	8001fd4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e095      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e68:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e80:	4b3d      	ldr	r3, [pc, #244]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e88:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4936      	ldr	r1, [pc, #216]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b80      	cmp	r3, #128	@ 0x80
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eaa:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a32      	ldr	r2, [pc, #200]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d21d      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 020f 	bic.w	r2, r3, #15
 8002ecc:	4929      	ldr	r1, [pc, #164]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ed4:	f7ff f87e 	bl	8001fd4 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7ff f87a 	bl	8001fd4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e03b      	b.n	8002f6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1ed      	bne.n	8002edc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4917      	ldr	r1, [pc, #92]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490f      	ldr	r1, [pc, #60]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f3e:	f000 f825 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <HAL_RCC_ClockConfig+0x264>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <HAL_RCC_ClockConfig+0x26c>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x270>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_ClockConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe ffea 	bl	8001f3c <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	04c4b400 	.word	0x04c4b400
 8002f80:	080066f4 	.word	0x080066f4
 8002f84:	200000b0 	.word	0x200000b0
 8002f88:	200000b4 	.word	0x200000b4

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f92:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e047      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fa4:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb0:	4b26      	ldr	r3, [pc, #152]	@ (800304c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e03e      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d136      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800304c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	4a16      	ldr	r2, [pc, #88]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fea:	68d2      	ldr	r2, [r2, #12]
 8002fec:	0a12      	lsrs	r2, r2, #8
 8002fee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
      break;
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ffa:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	0a12      	lsrs	r2, r2, #8
 8003008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
      break;
 8003012:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0e5b      	lsrs	r3, r3, #25
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	3301      	adds	r3, #1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e001      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003034:	693b      	ldr	r3, [r7, #16]
}
 8003036:	4618      	mov	r0, r3
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	00f42400 	.word	0x00f42400
 800304c:	016e3600 	.word	0x016e3600

08003050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200000b0 	.word	0x200000b0

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4904      	ldr	r1, [pc, #16]	@ (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	08006704 	.word	0x08006704

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003098:	f7ff ffda 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	@ (80030bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08006704 	.word	0x08006704

080030c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3301      	adds	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d10c      	bne.n	80030fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ee:	68d2      	ldr	r2, [r2, #12]
 80030f0:	0a12      	lsrs	r2, r2, #8
 80030f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
    break;
 80030fc:	e00c      	b.n	8003118 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030fe:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4a0e      	ldr	r2, [pc, #56]	@ (8003140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	0a12      	lsrs	r2, r2, #8
 800310c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    break;
 8003116:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003118:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0e5b      	lsrs	r3, r3, #25
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	3301      	adds	r3, #1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003132:	687b      	ldr	r3, [r7, #4]
}
 8003134:	4618      	mov	r0, r3
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40021000 	.word	0x40021000
 8003144:	016e3600 	.word	0x016e3600
 8003148:	00f42400 	.word	0x00f42400

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003154:	2300      	movs	r3, #0
 8003156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003158:	2300      	movs	r3, #0
 800315a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8098 	beq.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	4a3f      	ldr	r2, [pc, #252]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
 8003186:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003196:	4b3a      	ldr	r3, [pc, #232]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a39      	ldr	r2, [pc, #228]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a2:	f7fe ff17 	bl	8001fd4 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031a8:	e009      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fe ff13 	bl	8001fd4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d902      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	74fb      	strb	r3, [r7, #19]
        break;
 80031bc:	e005      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031be:	4b30      	ldr	r3, [pc, #192]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ef      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d159      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d0:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01e      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d019      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031f8:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a1f      	ldr	r2, [pc, #124]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003208:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a1b      	ldr	r2, [pc, #108]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003218:	4a18      	ldr	r2, [pc, #96]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fed3 	bl	8001fd4 <HAL_GetTick>
 800322e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003230:	e00b      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fecf 	bl	8001fd4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d902      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	74fb      	strb	r3, [r7, #19]
            break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ec      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326c:	4903      	ldr	r1, [pc, #12]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
 800327a:	e005      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800327c:	40021000 	.word	0x40021000
 8003280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003288:	7c7b      	ldrb	r3, [r7, #17]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4ba7      	ldr	r3, [pc, #668]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003292:	4aa6      	ldr	r2, [pc, #664]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003298:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a6:	4ba1      	ldr	r3, [pc, #644]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f023 0203 	bic.w	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	499d      	ldr	r1, [pc, #628]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032c8:	4b98      	ldr	r3, [pc, #608]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f023 020c 	bic.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4995      	ldr	r1, [pc, #596]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ea:	4b90      	ldr	r3, [pc, #576]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	498c      	ldr	r1, [pc, #560]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800330c:	4b87      	ldr	r3, [pc, #540]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	4984      	ldr	r1, [pc, #528]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800332e:	4b7f      	ldr	r3, [pc, #508]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	497b      	ldr	r1, [pc, #492]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003350:	4b76      	ldr	r3, [pc, #472]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4973      	ldr	r1, [pc, #460]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003372:	4b6e      	ldr	r3, [pc, #440]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003378:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	496a      	ldr	r1, [pc, #424]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003394:	4b65      	ldr	r3, [pc, #404]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4962      	ldr	r1, [pc, #392]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b6:	4b5d      	ldr	r3, [pc, #372]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	4959      	ldr	r1, [pc, #356]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033d8:	4b54      	ldr	r3, [pc, #336]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	4951      	ldr	r1, [pc, #324]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033fa:	4b4c      	ldr	r3, [pc, #304]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	4948      	ldr	r1, [pc, #288]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341c:	4b43      	ldr	r3, [pc, #268]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4940      	ldr	r1, [pc, #256]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343c:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a3a      	ldr	r2, [pc, #232]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003446:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003462:	4932      	ldr	r1, [pc, #200]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b2d      	ldr	r3, [pc, #180]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800348c:	4b27      	ldr	r3, [pc, #156]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	4924      	ldr	r1, [pc, #144]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ac:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d2:	4916      	ldr	r1, [pc, #88]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a10      	ldr	r2, [pc, #64]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4908      	ldr	r1, [pc, #32]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800351a:	d109      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a02      	ldr	r2, [pc, #8]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800353c:	4b29      	ldr	r3, [pc, #164]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	4926      	ldr	r1, [pc, #152]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800355a:	d105      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800355c:	4b21      	ldr	r3, [pc, #132]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003566:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d015      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003574:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003582:	4918      	ldr	r1, [pc, #96]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003592:	d105      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003594:	4b13      	ldr	r3, [pc, #76]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035ac:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	490a      	ldr	r1, [pc, #40]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ca:	d105      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80035d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e049      	b.n	800368e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe fb24 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f000 fef8 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d001      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e054      	b.n	800375a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d022      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036da:	d01d      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <HAL_TIM_Base_Start_IT+0xd4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003774 <HAL_TIM_Base_Start_IT+0xdc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_TIM_Base_Start_IT+0xe0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <HAL_TIM_Base_Start_IT+0xe4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0x80>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_TIM_Base_Start_IT+0xe8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d115      	bne.n	8003744 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_TIM_Base_Start_IT+0xec>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d015      	beq.n	8003756 <HAL_TIM_Base_Start_IT+0xbe>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003730:	d011      	beq.n	8003756 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	e008      	b.n	8003756 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e000      	b.n	8003758 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40013400 	.word	0x40013400
 800377c:	40014000 	.word	0x40014000
 8003780:	40015000 	.word	0x40015000
 8003784:	00010007 	.word	0x00010007

08003788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e049      	b.n	800382e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f841 	bl	8003836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fe28 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e03c      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e02f      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e022      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d109      	bne.n	80038be <HAL_TIM_PWM_Start+0x72>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	e015      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d109      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x8c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e008      	b.n	80038ea <HAL_TIM_PWM_Start+0x9e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0a6      	b.n	8003a40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xb6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003900:	e023      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0xc6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003910:	e01b      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Start+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003920:	e013      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0xe6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003930:	e00b      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b10      	cmp	r3, #16
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0xf6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003940:	e003      	b.n	800394a <HAL_TIM_PWM_Start+0xfe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f9dc 	bl	8004d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a48 <HAL_TIM_PWM_Start+0x1fc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_TIM_PWM_Start+0x148>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a39      	ldr	r2, [pc, #228]	@ (8003a4c <HAL_TIM_PWM_Start+0x200>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_TIM_PWM_Start+0x148>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a37      	ldr	r2, [pc, #220]	@ (8003a50 <HAL_TIM_PWM_Start+0x204>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_TIM_PWM_Start+0x148>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a36      	ldr	r2, [pc, #216]	@ (8003a54 <HAL_TIM_PWM_Start+0x208>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_TIM_PWM_Start+0x148>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a34      	ldr	r2, [pc, #208]	@ (8003a58 <HAL_TIM_PWM_Start+0x20c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_PWM_Start+0x148>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	@ (8003a5c <HAL_TIM_PWM_Start+0x210>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_TIM_PWM_Start+0x14c>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_TIM_PWM_Start+0x14e>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a25      	ldr	r2, [pc, #148]	@ (8003a48 <HAL_TIM_PWM_Start+0x1fc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c0:	d01d      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_TIM_PWM_Start+0x214>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <HAL_TIM_PWM_Start+0x218>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	@ (8003a68 <HAL_TIM_PWM_Start+0x21c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	@ (8003a4c <HAL_TIM_PWM_Start+0x200>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_TIM_PWM_Start+0x204>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_PWM_Start+0x1b2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <HAL_TIM_PWM_Start+0x210>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d115      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_TIM_PWM_Start+0x220>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d015      	beq.n	8003a3c <HAL_TIM_PWM_Start+0x1f0>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a16:	d011      	beq.n	8003a3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	e008      	b.n	8003a3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e000      	b.n	8003a3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800
 8003a5c:	40015000 	.word	0x40015000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	00010007 	.word	0x00010007

08003a70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e097      	b.n	8003bb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fe f935 	bl	8001d08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
 8003ab8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f000 fca9 	bl	800441c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	4313      	orrs	r3, r2
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b10:	f023 030c 	bic.w	r3, r3, #12
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	011a      	lsls	r2, r3, #4
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	031b      	lsls	r3, r3, #12
 8003b40:	4313      	orrs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4313      	orrs	r3, r2
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003be4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d110      	bne.n	8003c0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bf2:	7b7b      	ldrb	r3, [r7, #13]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e069      	b.n	8003cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0c:	e031      	b.n	8003c72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d110      	bne.n	8003c36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c1a:	7b3b      	ldrb	r3, [r7, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e055      	b.n	8003cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c34:	e01d      	b.n	8003c72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d108      	bne.n	8003c4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c3c:	7bbb      	ldrb	r3, [r7, #14]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c48:	7b3b      	ldrb	r3, [r7, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d001      	beq.n	8003c52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e03e      	b.n	8003cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_TIM_Encoder_Start+0xc4>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d008      	beq.n	8003c90 <HAL_TIM_Encoder_Start+0xd4>
 8003c7e:	e00f      	b.n	8003ca0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 f841 	bl	8004d10 <TIM_CCxChannelCmd>
      break;
 8003c8e:	e016      	b.n	8003cbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	2104      	movs	r1, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f839 	bl	8004d10 <TIM_CCxChannelCmd>
      break;
 8003c9e:	e00e      	b.n	8003cbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f831 	bl	8004d10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f82a 	bl	8004d10 <TIM_CCxChannelCmd>
      break;
 8003cbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01b      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fb5c 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fb4e 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fb5f 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0204 	mvn.w	r2, #4
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fb36 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fb28 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fb39 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0208 	mvn.w	r2, #8
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2204      	movs	r2, #4
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fb10 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fb02 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb13 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d020      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0210 	mvn.w	r2, #16
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2208      	movs	r2, #8
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 faea 	bl	80043e0 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fadc 	bl	80043cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 faed 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0201 	mvn.w	r2, #1
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fa86 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f001 f8a9 	bl	8004fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f8a1 	bl	8004fd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 faa7 	bl	8004408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0220 	mvn.w	r2, #32
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f001 f869 	bl	8004fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f001 f875 	bl	8004fec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00c      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 f86d 	bl	8005000 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 f865 	bl	8005014 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f001 f85d 	bl	8005028 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0ff      	b.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b14      	cmp	r3, #20
 8003fa2:	f200 80f0 	bhi.w	8004186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08004001 	.word	0x08004001
 8003fb0:	08004187 	.word	0x08004187
 8003fb4:	08004187 	.word	0x08004187
 8003fb8:	08004187 	.word	0x08004187
 8003fbc:	08004041 	.word	0x08004041
 8003fc0:	08004187 	.word	0x08004187
 8003fc4:	08004187 	.word	0x08004187
 8003fc8:	08004187 	.word	0x08004187
 8003fcc:	08004083 	.word	0x08004083
 8003fd0:	08004187 	.word	0x08004187
 8003fd4:	08004187 	.word	0x08004187
 8003fd8:	08004187 	.word	0x08004187
 8003fdc:	080040c3 	.word	0x080040c3
 8003fe0:	08004187 	.word	0x08004187
 8003fe4:	08004187 	.word	0x08004187
 8003fe8:	08004187 	.word	0x08004187
 8003fec:	08004105 	.word	0x08004105
 8003ff0:	08004187 	.word	0x08004187
 8003ff4:	08004187 	.word	0x08004187
 8003ff8:	08004187 	.word	0x08004187
 8003ffc:	08004145 	.word	0x08004145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fabc 	bl	8004584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6999      	ldr	r1, [r3, #24]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	619a      	str	r2, [r3, #24]
      break;
 800403e:	e0a5      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fb36 	bl	80046b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6999      	ldr	r1, [r3, #24]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	021a      	lsls	r2, r3, #8
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	619a      	str	r2, [r3, #24]
      break;
 8004080:	e084      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fba9 	bl	80047e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0208 	orr.w	r2, r2, #8
 800409c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0204 	bic.w	r2, r2, #4
 80040ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69d9      	ldr	r1, [r3, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	61da      	str	r2, [r3, #28]
      break;
 80040c0:	e064      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fc1b 	bl	8004904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	61da      	str	r2, [r3, #28]
      break;
 8004102:	e043      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fc8e 	bl	8004a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0208 	orr.w	r2, r2, #8
 800411e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004142:	e023      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fcd8 	bl	8004b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004184:	e002      	b.n	800418c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
      break;
 800418a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop

080041a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_ConfigClockSource+0x1c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e0f6      	b.n	80043aa <HAL_TIM_ConfigClockSource+0x20a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80041da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6f      	ldr	r2, [pc, #444]	@ (80043b4 <HAL_TIM_ConfigClockSource+0x214>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f000 80c1 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 80041fc:	4a6d      	ldr	r2, [pc, #436]	@ (80043b4 <HAL_TIM_ConfigClockSource+0x214>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	f200 80c6 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004204:	4a6c      	ldr	r2, [pc, #432]	@ (80043b8 <HAL_TIM_ConfigClockSource+0x218>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f000 80b9 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800420c:	4a6a      	ldr	r2, [pc, #424]	@ (80043b8 <HAL_TIM_ConfigClockSource+0x218>)
 800420e:	4293      	cmp	r3, r2
 8004210:	f200 80be 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004214:	4a69      	ldr	r2, [pc, #420]	@ (80043bc <HAL_TIM_ConfigClockSource+0x21c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f000 80b1 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800421c:	4a67      	ldr	r2, [pc, #412]	@ (80043bc <HAL_TIM_ConfigClockSource+0x21c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f200 80b6 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004224:	4a66      	ldr	r2, [pc, #408]	@ (80043c0 <HAL_TIM_ConfigClockSource+0x220>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f000 80a9 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800422c:	4a64      	ldr	r2, [pc, #400]	@ (80043c0 <HAL_TIM_ConfigClockSource+0x220>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f200 80ae 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004234:	4a63      	ldr	r2, [pc, #396]	@ (80043c4 <HAL_TIM_ConfigClockSource+0x224>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f000 80a1 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800423c:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <HAL_TIM_ConfigClockSource+0x224>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f200 80a6 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004244:	4a60      	ldr	r2, [pc, #384]	@ (80043c8 <HAL_TIM_ConfigClockSource+0x228>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f000 8099 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800424c:	4a5e      	ldr	r2, [pc, #376]	@ (80043c8 <HAL_TIM_ConfigClockSource+0x228>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f200 809e 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004254:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004258:	f000 8091 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800425c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004260:	f200 8096 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004268:	f000 8089 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x1de>
 800426c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004270:	f200 808e 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004278:	d03e      	beq.n	80042f8 <HAL_TIM_ConfigClockSource+0x158>
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427e:	f200 8087 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004286:	f000 8086 	beq.w	8004396 <HAL_TIM_ConfigClockSource+0x1f6>
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428e:	d87f      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004290:	2b70      	cmp	r3, #112	@ 0x70
 8004292:	d01a      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x12a>
 8004294:	2b70      	cmp	r3, #112	@ 0x70
 8004296:	d87b      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 8004298:	2b60      	cmp	r3, #96	@ 0x60
 800429a:	d050      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x19e>
 800429c:	2b60      	cmp	r3, #96	@ 0x60
 800429e:	d877      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 80042a0:	2b50      	cmp	r3, #80	@ 0x50
 80042a2:	d03c      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x17e>
 80042a4:	2b50      	cmp	r3, #80	@ 0x50
 80042a6:	d873      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d058      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x1be>
 80042ac:	2b40      	cmp	r3, #64	@ 0x40
 80042ae:	d86f      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b0:	2b30      	cmp	r3, #48	@ 0x30
 80042b2:	d064      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x1de>
 80042b4:	2b30      	cmp	r3, #48	@ 0x30
 80042b6:	d86b      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d060      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x1de>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d867      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d05c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x1de>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d05a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x1de>
 80042c8:	e062      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042da:	f000 fcf9 	bl	8004cd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
      break;
 80042f6:	e04f      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	f000 fce2 	bl	8004cd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800431a:	609a      	str	r2, [r3, #8]
      break;
 800431c:	e03c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	461a      	mov	r2, r3
 800432c:	f000 fc54 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2150      	movs	r1, #80	@ 0x50
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fcad 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 800433c:	e02c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434a:	461a      	mov	r2, r3
 800434c:	f000 fc73 	bl	8004c36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2160      	movs	r1, #96	@ 0x60
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fc9d 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 800435c:	e01c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	461a      	mov	r2, r3
 800436c:	f000 fc34 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2140      	movs	r1, #64	@ 0x40
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fc8d 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 800437c:	e00c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f000 fc84 	bl	8004c96 <TIM_ITRx_SetConfig>
      break;
 800438e:	e003      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e000      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	00100070 	.word	0x00100070
 80043b8:	00100060 	.word	0x00100060
 80043bc:	00100050 	.word	0x00100050
 80043c0:	00100040 	.word	0x00100040
 80043c4:	00100030 	.word	0x00100030
 80043c8:	00100020 	.word	0x00100020

080043cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a4c      	ldr	r2, [pc, #304]	@ (8004560 <TIM_Base_SetConfig+0x144>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d017      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443a:	d013      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a49      	ldr	r2, [pc, #292]	@ (8004564 <TIM_Base_SetConfig+0x148>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a48      	ldr	r2, [pc, #288]	@ (8004568 <TIM_Base_SetConfig+0x14c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a47      	ldr	r2, [pc, #284]	@ (800456c <TIM_Base_SetConfig+0x150>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <TIM_Base_SetConfig+0x154>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x48>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a45      	ldr	r2, [pc, #276]	@ (8004574 <TIM_Base_SetConfig+0x158>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a39      	ldr	r2, [pc, #228]	@ (8004560 <TIM_Base_SetConfig+0x144>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d023      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a36      	ldr	r2, [pc, #216]	@ (8004564 <TIM_Base_SetConfig+0x148>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a35      	ldr	r2, [pc, #212]	@ (8004568 <TIM_Base_SetConfig+0x14c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <TIM_Base_SetConfig+0x150>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <TIM_Base_SetConfig+0x154>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <TIM_Base_SetConfig+0x15c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a32      	ldr	r2, [pc, #200]	@ (800457c <TIM_Base_SetConfig+0x160>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a31      	ldr	r2, [pc, #196]	@ (8004580 <TIM_Base_SetConfig+0x164>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <TIM_Base_SetConfig+0x158>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <TIM_Base_SetConfig+0x144>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <TIM_Base_SetConfig+0x110>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1a      	ldr	r2, [pc, #104]	@ (8004570 <TIM_Base_SetConfig+0x154>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0x110>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1a      	ldr	r2, [pc, #104]	@ (8004578 <TIM_Base_SetConfig+0x15c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0x110>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a19      	ldr	r2, [pc, #100]	@ (800457c <TIM_Base_SetConfig+0x160>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x110>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a18      	ldr	r2, [pc, #96]	@ (8004580 <TIM_Base_SetConfig+0x164>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x110>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a13      	ldr	r2, [pc, #76]	@ (8004574 <TIM_Base_SetConfig+0x158>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]
  }
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40015000 	.word	0x40015000
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 0201 	bic.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 0302 	bic.w	r3, r3, #2
 80045d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a30      	ldr	r2, [pc, #192]	@ (80046a0 <TIM_OC1_SetConfig+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <TIM_OC1_SetConfig+0x88>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <TIM_OC1_SetConfig+0x120>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00f      	beq.n	800460c <TIM_OC1_SetConfig+0x88>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <TIM_OC1_SetConfig+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_OC1_SetConfig+0x88>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <TIM_OC1_SetConfig+0x128>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_OC1_SetConfig+0x88>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <TIM_OC1_SetConfig+0x12c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC1_SetConfig+0x88>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <TIM_OC1_SetConfig+0x130>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10c      	bne.n	8004626 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0308 	bic.w	r3, r3, #8
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1d      	ldr	r2, [pc, #116]	@ (80046a0 <TIM_OC1_SetConfig+0x11c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <TIM_OC1_SetConfig+0xd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1c      	ldr	r2, [pc, #112]	@ (80046a4 <TIM_OC1_SetConfig+0x120>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_OC1_SetConfig+0xd2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1b      	ldr	r2, [pc, #108]	@ (80046a8 <TIM_OC1_SetConfig+0x124>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_OC1_SetConfig+0xd2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1a      	ldr	r2, [pc, #104]	@ (80046ac <TIM_OC1_SetConfig+0x128>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_OC1_SetConfig+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a19      	ldr	r2, [pc, #100]	@ (80046b0 <TIM_OC1_SetConfig+0x12c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_OC1_SetConfig+0xd2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <TIM_OC1_SetConfig+0x130>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d111      	bne.n	800467a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800465c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40015000 	.word	0x40015000

080046b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f023 0210 	bic.w	r2, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0320 	bic.w	r3, r3, #32
 8004706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <TIM_OC2_SetConfig+0x110>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_OC2_SetConfig+0x74>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <TIM_OC2_SetConfig+0x114>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC2_SetConfig+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2a      	ldr	r2, [pc, #168]	@ (80047d0 <TIM_OC2_SetConfig+0x118>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10d      	bne.n	8004748 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <TIM_OC2_SetConfig+0x110>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <TIM_OC2_SetConfig+0xc0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <TIM_OC2_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_OC2_SetConfig+0xc0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <TIM_OC2_SetConfig+0x11c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_OC2_SetConfig+0xc0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <TIM_OC2_SetConfig+0x120>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_OC2_SetConfig+0xc0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <TIM_OC2_SetConfig+0x124>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC2_SetConfig+0xc0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <TIM_OC2_SetConfig+0x118>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d113      	bne.n	80047a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800477e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40015000 	.word	0x40015000
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <TIM_OC3_SetConfig+0x10c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_OC3_SetConfig+0x72>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <TIM_OC3_SetConfig+0x110>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC3_SetConfig+0x72>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a29      	ldr	r2, [pc, #164]	@ (80048f4 <TIM_OC3_SetConfig+0x114>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1e      	ldr	r2, [pc, #120]	@ (80048ec <TIM_OC3_SetConfig+0x10c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <TIM_OC3_SetConfig+0xbe>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <TIM_OC3_SetConfig+0x110>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_OC3_SetConfig+0xbe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <TIM_OC3_SetConfig+0x118>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_OC3_SetConfig+0xbe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <TIM_OC3_SetConfig+0x11c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_OC3_SetConfig+0xbe>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1b      	ldr	r2, [pc, #108]	@ (8004900 <TIM_OC3_SetConfig+0x120>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_OC3_SetConfig+0xbe>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a16      	ldr	r2, [pc, #88]	@ (80048f4 <TIM_OC3_SetConfig+0x114>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d113      	bne.n	80048c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40015000 	.word	0x40015000
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <TIM_OC4_SetConfig+0x110>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_OC4_SetConfig+0x74>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <TIM_OC4_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC4_SetConfig+0x74>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <TIM_OC4_SetConfig+0x118>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10d      	bne.n	8004994 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800497e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	031b      	lsls	r3, r3, #12
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <TIM_OC4_SetConfig+0x110>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <TIM_OC4_SetConfig+0xc0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <TIM_OC4_SetConfig+0x114>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00f      	beq.n	80049c4 <TIM_OC4_SetConfig+0xc0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <TIM_OC4_SetConfig+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_OC4_SetConfig+0xc0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <TIM_OC4_SetConfig+0x120>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_OC4_SetConfig+0xc0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <TIM_OC4_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC4_SetConfig+0xc0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <TIM_OC4_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d113      	bne.n	80049ec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40015000 	.word	0x40015000
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <TIM_OC5_SetConfig+0xbc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_OC5_SetConfig+0x82>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <TIM_OC5_SetConfig+0xc0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_OC5_SetConfig+0x82>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <TIM_OC5_SetConfig+0xc4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_OC5_SetConfig+0x82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <TIM_OC5_SetConfig+0xc8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_OC5_SetConfig+0x82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <TIM_OC5_SetConfig+0xcc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_OC5_SetConfig+0x82>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a14      	ldr	r2, [pc, #80]	@ (8004afc <TIM_OC5_SetConfig+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d109      	bne.n	8004ac2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800
 8004afc:	40015000 	.word	0x40015000

08004b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	051b      	lsls	r3, r3, #20
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <TIM_OC6_SetConfig+0xc0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <TIM_OC6_SetConfig+0x84>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a19      	ldr	r2, [pc, #100]	@ (8004bc4 <TIM_OC6_SetConfig+0xc4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_OC6_SetConfig+0x84>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a18      	ldr	r2, [pc, #96]	@ (8004bc8 <TIM_OC6_SetConfig+0xc8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_OC6_SetConfig+0x84>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a17      	ldr	r2, [pc, #92]	@ (8004bcc <TIM_OC6_SetConfig+0xcc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_OC6_SetConfig+0x84>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <TIM_OC6_SetConfig+0xd0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC6_SetConfig+0x84>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <TIM_OC6_SetConfig+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d109      	bne.n	8004b98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	029b      	lsls	r3, r3, #10
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40013400 	.word	0x40013400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40014400 	.word	0x40014400
 8004bd0:	40014800 	.word	0x40014800
 8004bd4:	40015000 	.word	0x40015000

08004bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	031b      	lsls	r3, r3, #12
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f043 0307 	orr.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2201      	movs	r2, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	401a      	ands	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e074      	b.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a34      	ldr	r2, [pc, #208]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a31      	ldr	r2, [pc, #196]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004db8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a21      	ldr	r2, [pc, #132]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df4:	d01d      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10c      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40015000 	.word	0x40015000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e078      	b.n	8004f96 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d11c      	bne.n	8004f84 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40013400 	.word	0x40013400
 8004fac:	40015000 	.word	0x40015000

08004fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e042      	b.n	80050d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc fda3 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2224      	movs	r2, #36	@ 0x24
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fb24 	bl	80056d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f825 	bl	80050dc <UART_SetConfig>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e01b      	b.n	80050d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fba3 	bl	8005818 <UART_CheckIdleState>
 80050d2:	4603      	mov	r3, r0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e0:	b08c      	sub	sp, #48	@ 0x30
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4313      	orrs	r3, r2
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4baa      	ldr	r3, [pc, #680]	@ (80053b4 <UART_SetConfig+0x2d8>)
 800510c:	4013      	ands	r3, r2
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005114:	430b      	orrs	r3, r1
 8005116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a9f      	ldr	r2, [pc, #636]	@ (80053b8 <UART_SetConfig+0x2dc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005144:	4313      	orrs	r3, r2
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005152:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800515c:	430b      	orrs	r3, r1
 800515e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	f023 010f 	bic.w	r1, r3, #15
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a90      	ldr	r2, [pc, #576]	@ (80053bc <UART_SetConfig+0x2e0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d125      	bne.n	80051cc <UART_SetConfig+0xf0>
 8005180:	4b8f      	ldr	r3, [pc, #572]	@ (80053c0 <UART_SetConfig+0x2e4>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d81a      	bhi.n	80051c4 <UART_SetConfig+0xe8>
 800518e:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <UART_SetConfig+0xb8>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051b5 	.word	0x080051b5
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051aa:	e116      	b.n	80053da <UART_SetConfig+0x2fe>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	e112      	b.n	80053da <UART_SetConfig+0x2fe>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	e10e      	b.n	80053da <UART_SetConfig+0x2fe>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c2:	e10a      	b.n	80053da <UART_SetConfig+0x2fe>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e106      	b.n	80053da <UART_SetConfig+0x2fe>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a7c      	ldr	r2, [pc, #496]	@ (80053c4 <UART_SetConfig+0x2e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d138      	bne.n	8005248 <UART_SetConfig+0x16c>
 80051d6:	4b7a      	ldr	r3, [pc, #488]	@ (80053c0 <UART_SetConfig+0x2e4>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b0c      	cmp	r3, #12
 80051e2:	d82d      	bhi.n	8005240 <UART_SetConfig+0x164>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <UART_SetConfig+0x110>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005241 	.word	0x08005241
 80051f4:	08005241 	.word	0x08005241
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
 800520c:	08005229 	.word	0x08005229
 8005210:	08005241 	.word	0x08005241
 8005214:	08005241 	.word	0x08005241
 8005218:	08005241 	.word	0x08005241
 800521c:	08005239 	.word	0x08005239
 8005220:	2300      	movs	r3, #0
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005226:	e0d8      	b.n	80053da <UART_SetConfig+0x2fe>
 8005228:	2302      	movs	r3, #2
 800522a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522e:	e0d4      	b.n	80053da <UART_SetConfig+0x2fe>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e0d0      	b.n	80053da <UART_SetConfig+0x2fe>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e0cc      	b.n	80053da <UART_SetConfig+0x2fe>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e0c8      	b.n	80053da <UART_SetConfig+0x2fe>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5e      	ldr	r2, [pc, #376]	@ (80053c8 <UART_SetConfig+0x2ec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d125      	bne.n	800529e <UART_SetConfig+0x1c2>
 8005252:	4b5b      	ldr	r3, [pc, #364]	@ (80053c0 <UART_SetConfig+0x2e4>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800525c:	2b30      	cmp	r3, #48	@ 0x30
 800525e:	d016      	beq.n	800528e <UART_SetConfig+0x1b2>
 8005260:	2b30      	cmp	r3, #48	@ 0x30
 8005262:	d818      	bhi.n	8005296 <UART_SetConfig+0x1ba>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d00a      	beq.n	800527e <UART_SetConfig+0x1a2>
 8005268:	2b20      	cmp	r3, #32
 800526a:	d814      	bhi.n	8005296 <UART_SetConfig+0x1ba>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <UART_SetConfig+0x19a>
 8005270:	2b10      	cmp	r3, #16
 8005272:	d008      	beq.n	8005286 <UART_SetConfig+0x1aa>
 8005274:	e00f      	b.n	8005296 <UART_SetConfig+0x1ba>
 8005276:	2300      	movs	r3, #0
 8005278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527c:	e0ad      	b.n	80053da <UART_SetConfig+0x2fe>
 800527e:	2302      	movs	r3, #2
 8005280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005284:	e0a9      	b.n	80053da <UART_SetConfig+0x2fe>
 8005286:	2304      	movs	r3, #4
 8005288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528c:	e0a5      	b.n	80053da <UART_SetConfig+0x2fe>
 800528e:	2308      	movs	r3, #8
 8005290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005294:	e0a1      	b.n	80053da <UART_SetConfig+0x2fe>
 8005296:	2310      	movs	r3, #16
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529c:	e09d      	b.n	80053da <UART_SetConfig+0x2fe>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <UART_SetConfig+0x2f0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d125      	bne.n	80052f4 <UART_SetConfig+0x218>
 80052a8:	4b45      	ldr	r3, [pc, #276]	@ (80053c0 <UART_SetConfig+0x2e4>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052b4:	d016      	beq.n	80052e4 <UART_SetConfig+0x208>
 80052b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052b8:	d818      	bhi.n	80052ec <UART_SetConfig+0x210>
 80052ba:	2b80      	cmp	r3, #128	@ 0x80
 80052bc:	d00a      	beq.n	80052d4 <UART_SetConfig+0x1f8>
 80052be:	2b80      	cmp	r3, #128	@ 0x80
 80052c0:	d814      	bhi.n	80052ec <UART_SetConfig+0x210>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <UART_SetConfig+0x1f0>
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d008      	beq.n	80052dc <UART_SetConfig+0x200>
 80052ca:	e00f      	b.n	80052ec <UART_SetConfig+0x210>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e082      	b.n	80053da <UART_SetConfig+0x2fe>
 80052d4:	2302      	movs	r3, #2
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e07e      	b.n	80053da <UART_SetConfig+0x2fe>
 80052dc:	2304      	movs	r3, #4
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	e07a      	b.n	80053da <UART_SetConfig+0x2fe>
 80052e4:	2308      	movs	r3, #8
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	e076      	b.n	80053da <UART_SetConfig+0x2fe>
 80052ec:	2310      	movs	r3, #16
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f2:	e072      	b.n	80053da <UART_SetConfig+0x2fe>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <UART_SetConfig+0x2f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d12a      	bne.n	8005354 <UART_SetConfig+0x278>
 80052fe:	4b30      	ldr	r3, [pc, #192]	@ (80053c0 <UART_SetConfig+0x2e4>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800530c:	d01a      	beq.n	8005344 <UART_SetConfig+0x268>
 800530e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005312:	d81b      	bhi.n	800534c <UART_SetConfig+0x270>
 8005314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005318:	d00c      	beq.n	8005334 <UART_SetConfig+0x258>
 800531a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531e:	d815      	bhi.n	800534c <UART_SetConfig+0x270>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <UART_SetConfig+0x250>
 8005324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005328:	d008      	beq.n	800533c <UART_SetConfig+0x260>
 800532a:	e00f      	b.n	800534c <UART_SetConfig+0x270>
 800532c:	2300      	movs	r3, #0
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005332:	e052      	b.n	80053da <UART_SetConfig+0x2fe>
 8005334:	2302      	movs	r3, #2
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533a:	e04e      	b.n	80053da <UART_SetConfig+0x2fe>
 800533c:	2304      	movs	r3, #4
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005342:	e04a      	b.n	80053da <UART_SetConfig+0x2fe>
 8005344:	2308      	movs	r3, #8
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534a:	e046      	b.n	80053da <UART_SetConfig+0x2fe>
 800534c:	2310      	movs	r3, #16
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e042      	b.n	80053da <UART_SetConfig+0x2fe>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <UART_SetConfig+0x2dc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d13a      	bne.n	80053d4 <UART_SetConfig+0x2f8>
 800535e:	4b18      	ldr	r3, [pc, #96]	@ (80053c0 <UART_SetConfig+0x2e4>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005364:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005368:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800536c:	d01a      	beq.n	80053a4 <UART_SetConfig+0x2c8>
 800536e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005372:	d81b      	bhi.n	80053ac <UART_SetConfig+0x2d0>
 8005374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005378:	d00c      	beq.n	8005394 <UART_SetConfig+0x2b8>
 800537a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800537e:	d815      	bhi.n	80053ac <UART_SetConfig+0x2d0>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <UART_SetConfig+0x2b0>
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005388:	d008      	beq.n	800539c <UART_SetConfig+0x2c0>
 800538a:	e00f      	b.n	80053ac <UART_SetConfig+0x2d0>
 800538c:	2300      	movs	r3, #0
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e022      	b.n	80053da <UART_SetConfig+0x2fe>
 8005394:	2302      	movs	r3, #2
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e01e      	b.n	80053da <UART_SetConfig+0x2fe>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a2:	e01a      	b.n	80053da <UART_SetConfig+0x2fe>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053aa:	e016      	b.n	80053da <UART_SetConfig+0x2fe>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e012      	b.n	80053da <UART_SetConfig+0x2fe>
 80053b4:	cfff69f3 	.word	0xcfff69f3
 80053b8:	40008000 	.word	0x40008000
 80053bc:	40013800 	.word	0x40013800
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40004400 	.word	0x40004400
 80053c8:	40004800 	.word	0x40004800
 80053cc:	40004c00 	.word	0x40004c00
 80053d0:	40005000 	.word	0x40005000
 80053d4:	2310      	movs	r3, #16
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4aae      	ldr	r2, [pc, #696]	@ (8005698 <UART_SetConfig+0x5bc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	f040 8097 	bne.w	8005514 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d823      	bhi.n	8005436 <UART_SetConfig+0x35a>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0x318>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005437 	.word	0x08005437
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005437 	.word	0x08005437
 8005404:	08005427 	.word	0x08005427
 8005408:	08005437 	.word	0x08005437
 800540c:	08005437 	.word	0x08005437
 8005410:	08005437 	.word	0x08005437
 8005414:	0800542f 	.word	0x0800542f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fd fe26 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 800541c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800541e:	e010      	b.n	8005442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005420:	4b9e      	ldr	r3, [pc, #632]	@ (800569c <UART_SetConfig+0x5c0>)
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005424:	e00d      	b.n	8005442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005426:	f7fd fdb1 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800542a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800542c:	e009      	b.n	8005442 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005434:	e005      	b.n	8005442 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8130 	beq.w	80056aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	4a94      	ldr	r2, [pc, #592]	@ (80056a0 <UART_SetConfig+0x5c4>)
 8005450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005454:	461a      	mov	r2, r3
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	fbb3 f3f2 	udiv	r3, r3, r2
 800545c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4413      	add	r3, r2
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	429a      	cmp	r2, r3
 800546c:	d305      	bcc.n	800547a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	429a      	cmp	r2, r3
 8005478:	d903      	bls.n	8005482 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005480:	e113      	b.n	80056aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	2200      	movs	r2, #0
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	60fa      	str	r2, [r7, #12]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	4a84      	ldr	r2, [pc, #528]	@ (80056a0 <UART_SetConfig+0x5c4>)
 8005490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005494:	b29b      	uxth	r3, r3
 8005496:	2200      	movs	r2, #0
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054a4:	f7fb fad6 	bl	8000a54 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	020b      	lsls	r3, r1, #8
 80054ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054be:	0202      	lsls	r2, r0, #8
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	6849      	ldr	r1, [r1, #4]
 80054c4:	0849      	lsrs	r1, r1, #1
 80054c6:	2000      	movs	r0, #0
 80054c8:	460c      	mov	r4, r1
 80054ca:	4605      	mov	r5, r0
 80054cc:	eb12 0804 	adds.w	r8, r2, r4
 80054d0:	eb43 0905 	adc.w	r9, r3, r5
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	469a      	mov	sl, r3
 80054dc:	4693      	mov	fp, r2
 80054de:	4652      	mov	r2, sl
 80054e0:	465b      	mov	r3, fp
 80054e2:	4640      	mov	r0, r8
 80054e4:	4649      	mov	r1, r9
 80054e6:	f7fb fab5 	bl	8000a54 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4613      	mov	r3, r2
 80054f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054f8:	d308      	bcc.n	800550c <UART_SetConfig+0x430>
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005500:	d204      	bcs.n	800550c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e0ce      	b.n	80056aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005512:	e0ca      	b.n	80056aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	d166      	bne.n	80055ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800551e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005522:	2b08      	cmp	r3, #8
 8005524:	d827      	bhi.n	8005576 <UART_SetConfig+0x49a>
 8005526:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <UART_SetConfig+0x450>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	08005551 	.word	0x08005551
 8005530:	08005559 	.word	0x08005559
 8005534:	08005561 	.word	0x08005561
 8005538:	08005577 	.word	0x08005577
 800553c:	08005567 	.word	0x08005567
 8005540:	08005577 	.word	0x08005577
 8005544:	08005577 	.word	0x08005577
 8005548:	08005577 	.word	0x08005577
 800554c:	0800556f 	.word	0x0800556f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005550:	f7fd fd8a 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8005554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005556:	e014      	b.n	8005582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005558:	f7fd fd9c 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 800555c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800555e:	e010      	b.n	8005582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005560:	4b4e      	ldr	r3, [pc, #312]	@ (800569c <UART_SetConfig+0x5c0>)
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005564:	e00d      	b.n	8005582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005566:	f7fd fd11 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800556a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800556c:	e009      	b.n	8005582 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005574:	e005      	b.n	8005582 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8090 	beq.w	80056aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	4a44      	ldr	r2, [pc, #272]	@ (80056a0 <UART_SetConfig+0x5c4>)
 8005590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005594:	461a      	mov	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	fbb3 f3f2 	udiv	r3, r3, r2
 800559c:	005a      	lsls	r2, r3, #1
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	441a      	add	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d916      	bls.n	80055e4 <UART_SetConfig+0x508>
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055bc:	d212      	bcs.n	80055e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f023 030f 	bic.w	r3, r3, #15
 80055c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	8bfb      	ldrh	r3, [r7, #30]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	8bfa      	ldrh	r2, [r7, #30]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	e062      	b.n	80056aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055ea:	e05e      	b.n	80056aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d828      	bhi.n	8005646 <UART_SetConfig+0x56a>
 80055f4:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <UART_SetConfig+0x520>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	08005647 	.word	0x08005647
 800560c:	08005637 	.word	0x08005637
 8005610:	08005647 	.word	0x08005647
 8005614:	08005647 	.word	0x08005647
 8005618:	08005647 	.word	0x08005647
 800561c:	0800563f 	.word	0x0800563f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fd fd22 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8005624:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005626:	e014      	b.n	8005652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7fd fd34 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 800562c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800562e:	e010      	b.n	8005652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005630:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <UART_SetConfig+0x5c0>)
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005634:	e00d      	b.n	8005652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005636:	f7fd fca9 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800563a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800563c:	e009      	b.n	8005652 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005644:	e005      	b.n	8005652 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005650:	bf00      	nop
    }

    if (pclk != 0U)
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d028      	beq.n	80056aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	4a10      	ldr	r2, [pc, #64]	@ (80056a0 <UART_SetConfig+0x5c4>)
 800565e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005662:	461a      	mov	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	fbb3 f2f2 	udiv	r2, r3, r2
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	441a      	add	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d910      	bls.n	80056a4 <UART_SetConfig+0x5c8>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005688:	d20c      	bcs.n	80056a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x5ce>
 8005696:	bf00      	nop
 8005698:	40008000 	.word	0x40008000
 800569c:	00f42400 	.word	0x00f42400
 80056a0:	0800670c 	.word	0x0800670c
      }
      else
      {
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2200      	movs	r2, #0
 80056be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3730      	adds	r7, #48	@ 0x30
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01a      	beq.n	80057ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057d2:	d10a      	bne.n	80057ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b098      	sub	sp, #96	@ 0x60
 800581c:	af02      	add	r7, sp, #8
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005828:	f7fc fbd4 	bl	8001fd4 <HAL_GetTick>
 800582c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b08      	cmp	r3, #8
 800583a:	d12f      	bne.n	800589c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005844:	2200      	movs	r2, #0
 8005846:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f88e 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d022      	beq.n	800589c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800586a:	653b      	str	r3, [r7, #80]	@ 0x50
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005874:	647b      	str	r3, [r7, #68]	@ 0x44
 8005876:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800587a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e063      	b.n	8005964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d149      	bne.n	800593e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f857 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03c      	beq.n	800593e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	623b      	str	r3, [r7, #32]
   return(result);
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	60fb      	str	r3, [r7, #12]
   return(result);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	617b      	str	r3, [r7, #20]
   return(result);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e012      	b.n	8005964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3758      	adds	r7, #88	@ 0x58
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	e04f      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d04b      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fc fb25 	bl	8001fd4 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x30>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e04e      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d037      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b80      	cmp	r3, #128	@ 0x80
 80059b2:	d034      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d031      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d110      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2208      	movs	r2, #8
 80059ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f838 	bl	8005a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2208      	movs	r2, #8
 80059da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e029      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f8:	d111      	bne.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f81e 	bl	8005a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e00f      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d0a0      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b095      	sub	sp, #84	@ 0x54
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e6      	bne.n	8005a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e3      	bne.n	8005a80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d118      	bne.n	8005af2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b06:	bf00      	nop
 8005b08:	3754      	adds	r7, #84	@ 0x54
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e027      	b.n	8005b78 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	@ 0x24
 8005b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e02d      	b.n	8005bf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2224      	movs	r2, #36	@ 0x24
 8005ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f84f 	bl	8005c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e02d      	b.n	8005c74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2224      	movs	r2, #36	@ 0x24
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f811 	bl	8005c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c9c:	e031      	b.n	8005d02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0e5b      	lsrs	r3, r3, #25
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	0f5b      	lsrs	r3, r3, #29
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	7b3a      	ldrb	r2, [r7, #12]
 8005cca:	4911      	ldr	r1, [pc, #68]	@ (8005d10 <UARTEx_SetNbDataToProcess+0x94>)
 8005ccc:	5c8a      	ldrb	r2, [r1, r2]
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cd2:	7b3a      	ldrb	r2, [r7, #12]
 8005cd4:	490f      	ldr	r1, [pc, #60]	@ (8005d14 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	7b7a      	ldrb	r2, [r7, #13]
 8005ce8:	4909      	ldr	r1, [pc, #36]	@ (8005d10 <UARTEx_SetNbDataToProcess+0x94>)
 8005cea:	5c8a      	ldrb	r2, [r1, r2]
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cf0:	7b7a      	ldrb	r2, [r7, #13]
 8005cf2:	4908      	ldr	r1, [pc, #32]	@ (8005d14 <UARTEx_SetNbDataToProcess+0x98>)
 8005cf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	08006724 	.word	0x08006724
 8005d14:	0800672c 	.word	0x0800672c

08005d18 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b08b      	sub	sp, #44	@ 0x2c
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	885b      	ldrh	r3, [r3, #2]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005d4a:	e013      	b.n	8005d74 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	1d1a      	adds	r2, r3, #4
 8005d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d52:	ed93 7a00 	vldr	s14, [r3]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	623a      	str	r2, [r7, #32]
 8005d5c:	edd3 7a00 	vldr	s15, [r3]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	61fa      	str	r2, [r7, #28]
 8005d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d6a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e8      	bne.n	8005d4c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8005d7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	372c      	adds	r7, #44	@ 0x2c
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	817b      	strh	r3, [r7, #10]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	897a      	ldrh	r2, [r7, #10]
 8005da4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b0bb      	sub	sp, #236	@ 0xec
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	885b      	ldrh	r3, [r3, #2]
 8005dde:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8005df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8005dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8005e00:	e03b      	b.n	8005e7a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8005e02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005e0e:	e00c      	b.n	8005e2a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e14:	1d1a      	adds	r2, r3, #4
 8005e16:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
        j--;
 8005e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e24:	3b01      	subs	r3, #1
 8005e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1ee      	bne.n	8005e10 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005e3c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e40:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8005e42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005e46:	3b01      	subs	r3, #1
 8005e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005e4c:	e00c      	b.n	8005e68 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
        j--;
 8005e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e62:	3b01      	subs	r3, #1
 8005e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1ee      	bne.n	8005e4e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8005e70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005e74:	3b01      	subs	r3, #1
 8005e76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8005e7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1bf      	bne.n	8005e02 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e88:	e2c7      	b.n	800641a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8005e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8005eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ec6:	e02c      	b.n	8005f22 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	885b      	ldrh	r3, [r3, #2]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ed6:	fb03 f101 	mul.w	r1, r3, r1
 8005eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ede:	440b      	add	r3, r1
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8005ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8005ef0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005ef4:	eeb0 7ae7 	vabs.f32	s14, s15
 8005ef8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005efc:	eef0 7ae7 	vabs.f32	s15, s15
 8005f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f08:	dd06      	ble.n	8005f18 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8005f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d3cd      	bcc.n	8005ec8 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8005f2c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005f30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f38:	f000 809b 	beq.w	8006072 <arm_mat_inverse_f32+0x2b4>
 8005f3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f44:	429a      	cmp	r2, r3
 8005f46:	f000 8094 	beq.w	8006072 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f6e:	fb03 f202 	mul.w	r2, r3, r2
 8005f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f7e:	4413      	add	r3, r2
 8005f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f8a:	fb03 f202 	mul.w	r2, r3, r2
 8005f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fa6:	e018      	b.n	8005fda <arm_mat_inverse_f32+0x21c>
 8005fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8005fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	dbe1      	blt.n	8005fa8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	885b      	ldrh	r3, [r3, #2]
 8005ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006000:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800600c:	4413      	add	r3, r2
 800600e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006014:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006022:	4413      	add	r3, r2
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800602e:	e018      	b.n	8006062 <arm_mat_inverse_f32+0x2a4>
 8006030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800603c:	1d1a      	adds	r2, r3, #4
 800603e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800605c:	3301      	adds	r3, #1
 800605e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006068:	429a      	cmp	r2, r3
 800606a:	dbe1      	blt.n	8006030 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8006072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006076:	2b01      	cmp	r3, #1
 8006078:	d009      	beq.n	800608e <arm_mat_inverse_f32+0x2d0>
 800607a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800607e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006086:	d102      	bne.n	800608e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8006088:	f06f 0304 	mvn.w	r3, #4
 800608c:	e208      	b.n	80064a0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800608e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006092:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	885b      	ldrh	r3, [r3, #2]
 80060aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80060ba:	fb03 f202 	mul.w	r2, r3, r2
 80060be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060d6:	e011      	b.n	80060fc <arm_mat_inverse_f32+0x33e>
 80060d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80060e2:	ed93 7a00 	vldr	s14, [r3]
 80060e6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc3 7a00 	vstr	s15, [r3]
 80060f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060f6:	3301      	adds	r3, #1
 80060f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	429a      	cmp	r2, r3
 8006104:	dbe8      	blt.n	80060d8 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	885b      	ldrh	r3, [r3, #2]
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800611c:	fb02 f303 	mul.w	r3, r2, r3
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006126:	4413      	add	r3, r2
 8006128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006132:	e011      	b.n	8006158 <arm_mat_inverse_f32+0x39a>
 8006134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800613e:	ed93 7a00 	vldr	s14, [r3]
 8006142:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc3 7a00 	vstr	s15, [r3]
 800614e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006152:	3301      	adds	r3, #1
 8006154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006158:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800615c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615e:	429a      	cmp	r2, r3
 8006160:	dbe8      	blt.n	8006134 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8006168:	e0ae      	b.n	80062c8 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	4619      	mov	r1, r3
 8006174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006178:	fb03 f101 	mul.w	r1, r3, r1
 800617c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006180:	440b      	add	r3, r1
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	885b      	ldrh	r3, [r3, #2]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80061d4:	fb03 f202 	mul.w	r2, r3, r2
 80061d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80061e4:	4413      	add	r3, r2
 80061e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061f0:	e01a      	b.n	8006228 <arm_mat_inverse_f32+0x46a>
 80061f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061fc:	ed93 7a00 	vldr	s14, [r3]
 8006200:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8006212:	ed93 7a00 	vldr	s14, [r3]
 8006216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621a:	edc3 7a00 	vstr	s15, [r3]
 800621e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006222:	3301      	adds	r3, #1
 8006224:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006228:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	dbdf      	blt.n	80061f2 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	885b      	ldrh	r3, [r3, #2]
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	60bb      	str	r3, [r7, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800625c:	4413      	add	r3, r2
 800625e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006270:	4413      	add	r3, r2
 8006272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800627c:	e01a      	b.n	80062b4 <arm_mat_inverse_f32+0x4f6>
 800627e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006288:	ed93 7a00 	vldr	s14, [r3]
 800628c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800629e:	ed93 7a00 	vldr	s14, [r3]
 80062a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a6:	edc3 7a00 	vstr	s15, [r3]
 80062aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062ae:	3301      	adds	r3, #1
 80062b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	dbdf      	blt.n	800627e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80062be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062c2:	3301      	adds	r3, #1
 80062c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062c8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80062cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ce:	429a      	cmp	r2, r3
 80062d0:	f4ff af4b 	bcc.w	800616a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80062d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d6:	3301      	adds	r3, #1
 80062d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062dc:	e092      	b.n	8006404 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	885b      	ldrh	r3, [r3, #2]
 80062e6:	4619      	mov	r1, r3
 80062e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ec:	fb03 f101 	mul.w	r1, r3, r1
 80062f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062f4:	440b      	add	r3, r1
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	677b      	str	r3, [r7, #116]	@ 0x74
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800632a:	fb03 f202 	mul.w	r2, r3, r2
 800632e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006338:	4413      	add	r3, r2
 800633a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006340:	fb03 f202 	mul.w	r2, r3, r2
 8006344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800634e:	4413      	add	r3, r2
 8006350:	677b      	str	r3, [r7, #116]	@ 0x74
 8006352:	2300      	movs	r3, #0
 8006354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006356:	e014      	b.n	8006382 <arm_mat_inverse_f32+0x5c4>
 8006358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	677a      	str	r2, [r7, #116]	@ 0x74
 800635e:	ed93 7a00 	vldr	s14, [r3]
 8006362:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800636c:	1d1a      	adds	r2, r3, #4
 800636e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006370:	ed93 7a00 	vldr	s14, [r3]
 8006374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006378:	edc3 7a00 	vstr	s15, [r3]
 800637c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800637e:	3301      	adds	r3, #1
 8006380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006382:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	429a      	cmp	r2, r3
 8006388:	dbe6      	blt.n	8006358 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063ae:	4413      	add	r3, r2
 80063b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80063be:	4413      	add	r3, r2
 80063c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063c2:	2300      	movs	r3, #0
 80063c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063c6:	e014      	b.n	80063f2 <arm_mat_inverse_f32+0x634>
 80063c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	66ba      	str	r2, [r7, #104]	@ 0x68
 80063ce:	ed93 7a00 	vldr	s14, [r3]
 80063d2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063e0:	ed93 7a00 	vldr	s14, [r3]
 80063e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063e8:	edc3 7a00 	vstr	s15, [r3]
 80063ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063ee:	3301      	adds	r3, #1
 80063f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80063f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	dbe6      	blt.n	80063c8 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80063fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063fe:	3301      	adds	r3, #1
 8006400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006404:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640a:	429a      	cmp	r2, r3
 800640c:	f4ff af67 	bcc.w	80062de <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8006410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006414:	3301      	adds	r3, #1
 8006416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800641a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800641e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006420:	429a      	cmp	r2, r3
 8006422:	f4ff ad32 	bcc.w	8005e8a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8006426:	2300      	movs	r3, #0
 8006428:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800642c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006430:	2b01      	cmp	r3, #1
 8006432:	d033      	beq.n	800649c <arm_mat_inverse_f32+0x6de>
 8006434:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006438:	eef5 7a40 	vcmp.f32	s15, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	d12c      	bne.n	800649c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800644e:	e010      	b.n	8006472 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8006450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006458:	4413      	add	r3, r2
 800645a:	edd3 7a00 	vldr	s15, [r3]
 800645e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006466:	d10d      	bne.n	8006484 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8006468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800647e:	429a      	cmp	r2, r3
 8006480:	d3e6      	bcc.n	8006450 <arm_mat_inverse_f32+0x692>
 8006482:	e000      	b.n	8006486 <arm_mat_inverse_f32+0x6c8>
            break;
 8006484:	bf00      	nop
      }

      if (i == numRows * numCols)
 8006486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006492:	429a      	cmp	r2, r3
 8006494:	d102      	bne.n	800649c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8006496:	23fb      	movs	r3, #251	@ 0xfb
 8006498:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800649c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	37ec      	adds	r7, #236	@ 0xec
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b093      	sub	sp, #76	@ 0x4c
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80064e8:	2300      	movs	r3, #0
 80064ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ec:	8b7b      	ldrh	r3, [r7, #26]
 80064ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80064fa:	8b3b      	ldrh	r3, [r7, #24]
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800650a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800650e:	8afb      	ldrh	r3, [r7, #22]
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8006512:	e017      	b.n	8006544 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8006514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006516:	1d1a      	adds	r2, r3, #4
 8006518:	647a      	str	r2, [r7, #68]	@ 0x44
 800651a:	ed93 7a00 	vldr	s14, [r3]
 800651e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006520:	edd3 7a00 	vldr	s15, [r3]
 8006524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006528:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800652c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006530:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8006534:	8b3b      	ldrh	r3, [r7, #24]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800653a:	4413      	add	r3, r2
 800653c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	3b01      	subs	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e4      	bne.n	8006514 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	1d1a      	adds	r2, r3, #4
 800654e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006550:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006552:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	3b01      	subs	r3, #1
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800655a:	8b3a      	ldrh	r2, [r7, #24]
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	6a3a      	ldr	r2, [r7, #32]
 8006564:	4413      	add	r3, r2
 8006566:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ca      	bne.n	8006504 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800656e:	8b3b      	ldrh	r3, [r7, #24]
 8006570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006572:	4413      	add	r3, r2
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8006576:	8afb      	ldrh	r3, [r7, #22]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800657c:	4413      	add	r3, r2
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	3b01      	subs	r3, #1
 8006584:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1b1      	bne.n	80064f0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800658c:	2300      	movs	r3, #0
 800658e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8006590:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8006594:	4618      	mov	r0, r3
 8006596:	374c      	adds	r7, #76	@ 0x4c
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08b      	sub	sp, #44	@ 0x2c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80065ac:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	885b      	ldrh	r3, [r3, #2]
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80065ce:	e010      	b.n	80065f2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80065d6:	ed93 7a00 	vldr	s14, [r3]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	623a      	str	r2, [r7, #32]
 80065e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80065e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1eb      	bne.n	80065d0 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80065fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	372c      	adds	r7, #44	@ 0x2c
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800660c:	b480      	push	{r7}
 800660e:	b08b      	sub	sp, #44	@ 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800663e:	e013      	b.n	8006668 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	1d1a      	adds	r2, r3, #4
 8006644:	627a      	str	r2, [r7, #36]	@ 0x24
 8006646:	ed93 7a00 	vldr	s14, [r3]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	623a      	str	r2, [r7, #32]
 8006650:	edd3 7a00 	vldr	s15, [r3]
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1d1a      	adds	r2, r3, #4
 8006658:	61fa      	str	r2, [r7, #28]
 800665a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3b01      	subs	r3, #1
 8006666:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e8      	bne.n	8006640 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800666e:	2300      	movs	r3, #0
 8006670:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8006672:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006676:	4618      	mov	r0, r3
 8006678:	372c      	adds	r7, #44	@ 0x2c
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <memset>:
 8006682:	4402      	add	r2, r0
 8006684:	4603      	mov	r3, r0
 8006686:	4293      	cmp	r3, r2
 8006688:	d100      	bne.n	800668c <memset+0xa>
 800668a:	4770      	bx	lr
 800668c:	f803 1b01 	strb.w	r1, [r3], #1
 8006690:	e7f9      	b.n	8006686 <memset+0x4>
	...

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4d0d      	ldr	r5, [pc, #52]	@ (80066cc <__libc_init_array+0x38>)
 8006698:	4c0d      	ldr	r4, [pc, #52]	@ (80066d0 <__libc_init_array+0x3c>)
 800669a:	1b64      	subs	r4, r4, r5
 800669c:	10a4      	asrs	r4, r4, #2
 800669e:	2600      	movs	r6, #0
 80066a0:	42a6      	cmp	r6, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	4d0b      	ldr	r5, [pc, #44]	@ (80066d4 <__libc_init_array+0x40>)
 80066a6:	4c0c      	ldr	r4, [pc, #48]	@ (80066d8 <__libc_init_array+0x44>)
 80066a8:	f000 f818 	bl	80066dc <_init>
 80066ac:	1b64      	subs	r4, r4, r5
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	2600      	movs	r6, #0
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066bc:	4798      	blx	r3
 80066be:	3601      	adds	r6, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c6:	4798      	blx	r3
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	0800673c 	.word	0x0800673c
 80066d0:	0800673c 	.word	0x0800673c
 80066d4:	0800673c 	.word	0x0800673c
 80066d8:	08006740 	.word	0x08006740

080066dc <_init>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	bf00      	nop
 80066e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e2:	bc08      	pop	{r3}
 80066e4:	469e      	mov	lr, r3
 80066e6:	4770      	bx	lr

080066e8 <_fini>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr
